
APC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003494  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800362c  0800362c  0000462c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003784  08003784  00005090  2**0
                  CONTENTS
  4 .ARM          00000008  08003784  08003784  00004784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800378c  0800378c  00005090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800378c  0800378c  0000478c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003790  08003790  00004790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003794  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000090  08003824  00005090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08003824  00005374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009105  00000000  00000000  000050c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000191a  00000000  00000000  0000e1c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000fae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f2  00000000  00000000  000102a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015607  00000000  00000000  0001089a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b2a  00000000  00000000  00025ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008563d  00000000  00000000  0002f9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5008  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f78  00000000  00000000  000b504c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000b6fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003614 	.word	0x08003614

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08003614 	.word	0x08003614

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	@ 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_uldivmod>:
 8000560:	b953      	cbnz	r3, 8000578 <__aeabi_uldivmod+0x18>
 8000562:	b94a      	cbnz	r2, 8000578 <__aeabi_uldivmod+0x18>
 8000564:	2900      	cmp	r1, #0
 8000566:	bf08      	it	eq
 8000568:	2800      	cmpeq	r0, #0
 800056a:	bf1c      	itt	ne
 800056c:	f04f 31ff 	movne.w	r1, #4294967295
 8000570:	f04f 30ff 	movne.w	r0, #4294967295
 8000574:	f000 b96a 	b.w	800084c <__aeabi_idiv0>
 8000578:	f1ad 0c08 	sub.w	ip, sp, #8
 800057c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000580:	f000 f806 	bl	8000590 <__udivmoddi4>
 8000584:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000588:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800058c:	b004      	add	sp, #16
 800058e:	4770      	bx	lr

08000590 <__udivmoddi4>:
 8000590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000594:	9d08      	ldr	r5, [sp, #32]
 8000596:	460c      	mov	r4, r1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d14e      	bne.n	800063a <__udivmoddi4+0xaa>
 800059c:	4694      	mov	ip, r2
 800059e:	458c      	cmp	ip, r1
 80005a0:	4686      	mov	lr, r0
 80005a2:	fab2 f282 	clz	r2, r2
 80005a6:	d962      	bls.n	800066e <__udivmoddi4+0xde>
 80005a8:	b14a      	cbz	r2, 80005be <__udivmoddi4+0x2e>
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	4091      	lsls	r1, r2
 80005b0:	fa20 f303 	lsr.w	r3, r0, r3
 80005b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005b8:	4319      	orrs	r1, r3
 80005ba:	fa00 fe02 	lsl.w	lr, r0, r2
 80005be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005c2:	fa1f f68c 	uxth.w	r6, ip
 80005c6:	fbb1 f4f7 	udiv	r4, r1, r7
 80005ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80005ce:	fb07 1114 	mls	r1, r7, r4, r1
 80005d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005d6:	fb04 f106 	mul.w	r1, r4, r6
 80005da:	4299      	cmp	r1, r3
 80005dc:	d90a      	bls.n	80005f4 <__udivmoddi4+0x64>
 80005de:	eb1c 0303 	adds.w	r3, ip, r3
 80005e2:	f104 30ff 	add.w	r0, r4, #4294967295
 80005e6:	f080 8112 	bcs.w	800080e <__udivmoddi4+0x27e>
 80005ea:	4299      	cmp	r1, r3
 80005ec:	f240 810f 	bls.w	800080e <__udivmoddi4+0x27e>
 80005f0:	3c02      	subs	r4, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	1a59      	subs	r1, r3, r1
 80005f6:	fa1f f38e 	uxth.w	r3, lr
 80005fa:	fbb1 f0f7 	udiv	r0, r1, r7
 80005fe:	fb07 1110 	mls	r1, r7, r0, r1
 8000602:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000606:	fb00 f606 	mul.w	r6, r0, r6
 800060a:	429e      	cmp	r6, r3
 800060c:	d90a      	bls.n	8000624 <__udivmoddi4+0x94>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 31ff 	add.w	r1, r0, #4294967295
 8000616:	f080 80fc 	bcs.w	8000812 <__udivmoddi4+0x282>
 800061a:	429e      	cmp	r6, r3
 800061c:	f240 80f9 	bls.w	8000812 <__udivmoddi4+0x282>
 8000620:	4463      	add	r3, ip
 8000622:	3802      	subs	r0, #2
 8000624:	1b9b      	subs	r3, r3, r6
 8000626:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800062a:	2100      	movs	r1, #0
 800062c:	b11d      	cbz	r5, 8000636 <__udivmoddi4+0xa6>
 800062e:	40d3      	lsrs	r3, r2
 8000630:	2200      	movs	r2, #0
 8000632:	e9c5 3200 	strd	r3, r2, [r5]
 8000636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800063a:	428b      	cmp	r3, r1
 800063c:	d905      	bls.n	800064a <__udivmoddi4+0xba>
 800063e:	b10d      	cbz	r5, 8000644 <__udivmoddi4+0xb4>
 8000640:	e9c5 0100 	strd	r0, r1, [r5]
 8000644:	2100      	movs	r1, #0
 8000646:	4608      	mov	r0, r1
 8000648:	e7f5      	b.n	8000636 <__udivmoddi4+0xa6>
 800064a:	fab3 f183 	clz	r1, r3
 800064e:	2900      	cmp	r1, #0
 8000650:	d146      	bne.n	80006e0 <__udivmoddi4+0x150>
 8000652:	42a3      	cmp	r3, r4
 8000654:	d302      	bcc.n	800065c <__udivmoddi4+0xcc>
 8000656:	4290      	cmp	r0, r2
 8000658:	f0c0 80f0 	bcc.w	800083c <__udivmoddi4+0x2ac>
 800065c:	1a86      	subs	r6, r0, r2
 800065e:	eb64 0303 	sbc.w	r3, r4, r3
 8000662:	2001      	movs	r0, #1
 8000664:	2d00      	cmp	r5, #0
 8000666:	d0e6      	beq.n	8000636 <__udivmoddi4+0xa6>
 8000668:	e9c5 6300 	strd	r6, r3, [r5]
 800066c:	e7e3      	b.n	8000636 <__udivmoddi4+0xa6>
 800066e:	2a00      	cmp	r2, #0
 8000670:	f040 8090 	bne.w	8000794 <__udivmoddi4+0x204>
 8000674:	eba1 040c 	sub.w	r4, r1, ip
 8000678:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800067c:	fa1f f78c 	uxth.w	r7, ip
 8000680:	2101      	movs	r1, #1
 8000682:	fbb4 f6f8 	udiv	r6, r4, r8
 8000686:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800068a:	fb08 4416 	mls	r4, r8, r6, r4
 800068e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000692:	fb07 f006 	mul.w	r0, r7, r6
 8000696:	4298      	cmp	r0, r3
 8000698:	d908      	bls.n	80006ac <__udivmoddi4+0x11c>
 800069a:	eb1c 0303 	adds.w	r3, ip, r3
 800069e:	f106 34ff 	add.w	r4, r6, #4294967295
 80006a2:	d202      	bcs.n	80006aa <__udivmoddi4+0x11a>
 80006a4:	4298      	cmp	r0, r3
 80006a6:	f200 80cd 	bhi.w	8000844 <__udivmoddi4+0x2b4>
 80006aa:	4626      	mov	r6, r4
 80006ac:	1a1c      	subs	r4, r3, r0
 80006ae:	fa1f f38e 	uxth.w	r3, lr
 80006b2:	fbb4 f0f8 	udiv	r0, r4, r8
 80006b6:	fb08 4410 	mls	r4, r8, r0, r4
 80006ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006be:	fb00 f707 	mul.w	r7, r0, r7
 80006c2:	429f      	cmp	r7, r3
 80006c4:	d908      	bls.n	80006d8 <__udivmoddi4+0x148>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f100 34ff 	add.w	r4, r0, #4294967295
 80006ce:	d202      	bcs.n	80006d6 <__udivmoddi4+0x146>
 80006d0:	429f      	cmp	r7, r3
 80006d2:	f200 80b0 	bhi.w	8000836 <__udivmoddi4+0x2a6>
 80006d6:	4620      	mov	r0, r4
 80006d8:	1bdb      	subs	r3, r3, r7
 80006da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006de:	e7a5      	b.n	800062c <__udivmoddi4+0x9c>
 80006e0:	f1c1 0620 	rsb	r6, r1, #32
 80006e4:	408b      	lsls	r3, r1
 80006e6:	fa22 f706 	lsr.w	r7, r2, r6
 80006ea:	431f      	orrs	r7, r3
 80006ec:	fa20 fc06 	lsr.w	ip, r0, r6
 80006f0:	fa04 f301 	lsl.w	r3, r4, r1
 80006f4:	ea43 030c 	orr.w	r3, r3, ip
 80006f8:	40f4      	lsrs	r4, r6
 80006fa:	fa00 f801 	lsl.w	r8, r0, r1
 80006fe:	0c38      	lsrs	r0, r7, #16
 8000700:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000704:	fbb4 fef0 	udiv	lr, r4, r0
 8000708:	fa1f fc87 	uxth.w	ip, r7
 800070c:	fb00 441e 	mls	r4, r0, lr, r4
 8000710:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000714:	fb0e f90c 	mul.w	r9, lr, ip
 8000718:	45a1      	cmp	r9, r4
 800071a:	fa02 f201 	lsl.w	r2, r2, r1
 800071e:	d90a      	bls.n	8000736 <__udivmoddi4+0x1a6>
 8000720:	193c      	adds	r4, r7, r4
 8000722:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000726:	f080 8084 	bcs.w	8000832 <__udivmoddi4+0x2a2>
 800072a:	45a1      	cmp	r9, r4
 800072c:	f240 8081 	bls.w	8000832 <__udivmoddi4+0x2a2>
 8000730:	f1ae 0e02 	sub.w	lr, lr, #2
 8000734:	443c      	add	r4, r7
 8000736:	eba4 0409 	sub.w	r4, r4, r9
 800073a:	fa1f f983 	uxth.w	r9, r3
 800073e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000742:	fb00 4413 	mls	r4, r0, r3, r4
 8000746:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800074a:	fb03 fc0c 	mul.w	ip, r3, ip
 800074e:	45a4      	cmp	ip, r4
 8000750:	d907      	bls.n	8000762 <__udivmoddi4+0x1d2>
 8000752:	193c      	adds	r4, r7, r4
 8000754:	f103 30ff 	add.w	r0, r3, #4294967295
 8000758:	d267      	bcs.n	800082a <__udivmoddi4+0x29a>
 800075a:	45a4      	cmp	ip, r4
 800075c:	d965      	bls.n	800082a <__udivmoddi4+0x29a>
 800075e:	3b02      	subs	r3, #2
 8000760:	443c      	add	r4, r7
 8000762:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000766:	fba0 9302 	umull	r9, r3, r0, r2
 800076a:	eba4 040c 	sub.w	r4, r4, ip
 800076e:	429c      	cmp	r4, r3
 8000770:	46ce      	mov	lr, r9
 8000772:	469c      	mov	ip, r3
 8000774:	d351      	bcc.n	800081a <__udivmoddi4+0x28a>
 8000776:	d04e      	beq.n	8000816 <__udivmoddi4+0x286>
 8000778:	b155      	cbz	r5, 8000790 <__udivmoddi4+0x200>
 800077a:	ebb8 030e 	subs.w	r3, r8, lr
 800077e:	eb64 040c 	sbc.w	r4, r4, ip
 8000782:	fa04 f606 	lsl.w	r6, r4, r6
 8000786:	40cb      	lsrs	r3, r1
 8000788:	431e      	orrs	r6, r3
 800078a:	40cc      	lsrs	r4, r1
 800078c:	e9c5 6400 	strd	r6, r4, [r5]
 8000790:	2100      	movs	r1, #0
 8000792:	e750      	b.n	8000636 <__udivmoddi4+0xa6>
 8000794:	f1c2 0320 	rsb	r3, r2, #32
 8000798:	fa20 f103 	lsr.w	r1, r0, r3
 800079c:	fa0c fc02 	lsl.w	ip, ip, r2
 80007a0:	fa24 f303 	lsr.w	r3, r4, r3
 80007a4:	4094      	lsls	r4, r2
 80007a6:	430c      	orrs	r4, r1
 80007a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007ac:	fa00 fe02 	lsl.w	lr, r0, r2
 80007b0:	fa1f f78c 	uxth.w	r7, ip
 80007b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007b8:	fb08 3110 	mls	r1, r8, r0, r3
 80007bc:	0c23      	lsrs	r3, r4, #16
 80007be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007c2:	fb00 f107 	mul.w	r1, r0, r7
 80007c6:	4299      	cmp	r1, r3
 80007c8:	d908      	bls.n	80007dc <__udivmoddi4+0x24c>
 80007ca:	eb1c 0303 	adds.w	r3, ip, r3
 80007ce:	f100 36ff 	add.w	r6, r0, #4294967295
 80007d2:	d22c      	bcs.n	800082e <__udivmoddi4+0x29e>
 80007d4:	4299      	cmp	r1, r3
 80007d6:	d92a      	bls.n	800082e <__udivmoddi4+0x29e>
 80007d8:	3802      	subs	r0, #2
 80007da:	4463      	add	r3, ip
 80007dc:	1a5b      	subs	r3, r3, r1
 80007de:	b2a4      	uxth	r4, r4
 80007e0:	fbb3 f1f8 	udiv	r1, r3, r8
 80007e4:	fb08 3311 	mls	r3, r8, r1, r3
 80007e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007ec:	fb01 f307 	mul.w	r3, r1, r7
 80007f0:	42a3      	cmp	r3, r4
 80007f2:	d908      	bls.n	8000806 <__udivmoddi4+0x276>
 80007f4:	eb1c 0404 	adds.w	r4, ip, r4
 80007f8:	f101 36ff 	add.w	r6, r1, #4294967295
 80007fc:	d213      	bcs.n	8000826 <__udivmoddi4+0x296>
 80007fe:	42a3      	cmp	r3, r4
 8000800:	d911      	bls.n	8000826 <__udivmoddi4+0x296>
 8000802:	3902      	subs	r1, #2
 8000804:	4464      	add	r4, ip
 8000806:	1ae4      	subs	r4, r4, r3
 8000808:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800080c:	e739      	b.n	8000682 <__udivmoddi4+0xf2>
 800080e:	4604      	mov	r4, r0
 8000810:	e6f0      	b.n	80005f4 <__udivmoddi4+0x64>
 8000812:	4608      	mov	r0, r1
 8000814:	e706      	b.n	8000624 <__udivmoddi4+0x94>
 8000816:	45c8      	cmp	r8, r9
 8000818:	d2ae      	bcs.n	8000778 <__udivmoddi4+0x1e8>
 800081a:	ebb9 0e02 	subs.w	lr, r9, r2
 800081e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000822:	3801      	subs	r0, #1
 8000824:	e7a8      	b.n	8000778 <__udivmoddi4+0x1e8>
 8000826:	4631      	mov	r1, r6
 8000828:	e7ed      	b.n	8000806 <__udivmoddi4+0x276>
 800082a:	4603      	mov	r3, r0
 800082c:	e799      	b.n	8000762 <__udivmoddi4+0x1d2>
 800082e:	4630      	mov	r0, r6
 8000830:	e7d4      	b.n	80007dc <__udivmoddi4+0x24c>
 8000832:	46d6      	mov	lr, sl
 8000834:	e77f      	b.n	8000736 <__udivmoddi4+0x1a6>
 8000836:	4463      	add	r3, ip
 8000838:	3802      	subs	r0, #2
 800083a:	e74d      	b.n	80006d8 <__udivmoddi4+0x148>
 800083c:	4606      	mov	r6, r0
 800083e:	4623      	mov	r3, r4
 8000840:	4608      	mov	r0, r1
 8000842:	e70f      	b.n	8000664 <__udivmoddi4+0xd4>
 8000844:	3e02      	subs	r6, #2
 8000846:	4463      	add	r3, ip
 8000848:	e730      	b.n	80006ac <__udivmoddi4+0x11c>
 800084a:	bf00      	nop

0800084c <__aeabi_idiv0>:
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop

08000850 <APC1_Init_Sensor>:
  * @brief  Initializes the APC1 sensor.
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval APC1 status
  */
enum APC1_Status APC1_Init_Sensor(UART_HandleTypeDef *huart) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

	if (huart == NULL) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d107      	bne.n	800086e <APC1_Init_Sensor+0x1e>
		APC1_Error_Buffer_Append(error_buffer, 10);
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <APC1_Init_Sensor+0x40>)
 8000860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000862:	4619      	mov	r1, r3
 8000864:	480b      	ldr	r0, [pc, #44]	@ (8000894 <APC1_Init_Sensor+0x44>)
 8000866:	f002 fea1 	bl	80035ac <strcat>
		return APC1_ERROR_NULL_POINTER;
 800086a:	2382      	movs	r3, #130	@ 0x82
 800086c:	e00c      	b.n	8000888 <APC1_Init_Sensor+0x38>
	}

	dev_settings = (struct APC1_Device_Settings) {
 800086e:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <APC1_Init_Sensor+0x48>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <APC1_Init_Sensor+0x48>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <APC1_Init_Sensor+0x48>)
 800087c:	2200      	movs	r2, #0
 800087e:	721a      	strb	r2, [r3, #8]
 8000880:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <APC1_Init_Sensor+0x48>)
 8000882:	2200      	movs	r2, #0
 8000884:	725a      	strb	r2, [r3, #9]
			.mode = APC1_PASSIVE_MODE,
			.fw_vesion = 0,
			.received_response = 0
	};

	return APC1_OK;
 8000886:	2300      	movs	r3, #0

}
 8000888:	4618      	mov	r0, r3
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000058 	.word	0x20000058
 8000894:	200001ac 	.word	0x200001ac
 8000898:	200002ac 	.word	0x200002ac

0800089c <APC1_Send_Receive_Command>:
  *               the configuration information for the specified UART module.
  * @param  setting	Struct element describing the command and its parameters.
  * @param  get_response  Indicating to receive or ignore response of executed command.
  * @retval HAL status
  */
HAL_StatusTypeDef APC1_Send_Receive_Command(UART_HandleTypeDef *huart, struct APC1_Command_Settings setting, int get_response) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	4638      	mov	r0, r7
 80008a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	HAL_StatusTypeDef status;

	memset(buffer, 0, BUFFER_SIZE);
 80008aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008ae:	2100      	movs	r1, #0
 80008b0:	4812      	ldr	r0, [pc, #72]	@ (80008fc <APC1_Send_Receive_Command+0x60>)
 80008b2:	f002 fe73 	bl	800359c <memset>
	if (get_response && (status = HAL_UART_Receive_IT(huart, buffer, setting.response_size)) != HAL_OK) {
 80008b6:	6a3b      	ldr	r3, [r7, #32]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00c      	beq.n	80008d6 <APC1_Send_Receive_Command+0x3a>
 80008bc:	7abb      	ldrb	r3, [r7, #10]
 80008be:	461a      	mov	r2, r3
 80008c0:	490e      	ldr	r1, [pc, #56]	@ (80008fc <APC1_Send_Receive_Command+0x60>)
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f001 fed1 	bl	800266a <HAL_UART_Receive_IT>
 80008c8:	4603      	mov	r3, r0
 80008ca:	75fb      	strb	r3, [r7, #23]
 80008cc:	7dfb      	ldrb	r3, [r7, #23]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <APC1_Send_Receive_Command+0x3a>
		return status;
 80008d2:	7dfb      	ldrb	r3, [r7, #23]
 80008d4:	e00e      	b.n	80008f4 <APC1_Send_Receive_Command+0x58>
	}
	if ((status = HAL_UART_Transmit(huart, setting.cmd, COMMAND_LENGHT, 2000)) != HAL_OK) {
 80008d6:	4639      	mov	r1, r7
 80008d8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80008dc:	2207      	movs	r2, #7
 80008de:	68f8      	ldr	r0, [r7, #12]
 80008e0:	f001 fe31 	bl	8002546 <HAL_UART_Transmit>
 80008e4:	4603      	mov	r3, r0
 80008e6:	75fb      	strb	r3, [r7, #23]
 80008e8:	7dfb      	ldrb	r3, [r7, #23]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <APC1_Send_Receive_Command+0x56>
		return status;
 80008ee:	7dfb      	ldrb	r3, [r7, #23]
 80008f0:	e000      	b.n	80008f4 <APC1_Send_Receive_Command+0x58>
	}

	return status;
 80008f2:	7dfb      	ldrb	r3, [r7, #23]

}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000ac 	.word	0x200000ac

08000900 <APC1_Read_Mea_Data>:
/**
  * @brief  Receives and processes answer for measurement command.
  * @note	This function is to be called when user wishes to get latest measurement from sensor.
  * @retval APC1 status
  */
enum APC1_Status APC1_Read_Mea_Data(void) {
 8000900:	b5b0      	push	{r4, r5, r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af02      	add	r7, sp, #8

	if (APC1_Send_Receive_Command(dev_settings.sensor_uart, command[APC1_CMD_READ_MEA_DATA], GET_RESPONSE) != HAL_OK) {
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <APC1_Read_Mea_Data+0x60>)
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <APC1_Read_Mea_Data+0x64>)
 800090c:	2201      	movs	r2, #1
 800090e:	9200      	str	r2, [sp, #0]
 8000910:	f8d3 200b 	ldr.w	r2, [r3, #11]
 8000914:	4615      	mov	r5, r2
 8000916:	f8d3 200f 	ldr.w	r2, [r3, #15]
 800091a:	4614      	mov	r4, r2
 800091c:	7cda      	ldrb	r2, [r3, #19]
 800091e:	7d19      	ldrb	r1, [r3, #20]
 8000920:	0209      	lsls	r1, r1, #8
 8000922:	430a      	orrs	r2, r1
 8000924:	7d5b      	ldrb	r3, [r3, #21]
 8000926:	041b      	lsls	r3, r3, #16
 8000928:	431a      	orrs	r2, r3
 800092a:	2300      	movs	r3, #0
 800092c:	f362 0317 	bfi	r3, r2, #0, #24
 8000930:	4629      	mov	r1, r5
 8000932:	4622      	mov	r2, r4
 8000934:	f7ff ffb2 	bl	800089c <APC1_Send_Receive_Command>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <APC1_Read_Mea_Data+0x42>
		return APC1_ERROR_CMD;
 800093e:	2381      	movs	r3, #129	@ 0x81
 8000940:	e00a      	b.n	8000958 <APC1_Read_Mea_Data+0x58>
	}
	while (dev_settings.received_response == 0);
 8000942:	bf00      	nop
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <APC1_Read_Mea_Data+0x60>)
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d0fb      	beq.n	8000944 <APC1_Read_Mea_Data+0x44>
	dev_settings.received_response = 0;
 800094c:	4b04      	ldr	r3, [pc, #16]	@ (8000960 <APC1_Read_Mea_Data+0x60>)
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]

	return APC1_Process_Mea_Data();
 8000952:	f000 f809 	bl	8000968 <APC1_Process_Mea_Data>
 8000956:	4603      	mov	r3, r0

}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	bdb0      	pop	{r4, r5, r7, pc}
 800095e:	bf00      	nop
 8000960:	200002ac 	.word	0x200002ac
 8000964:	20000000 	.word	0x20000000

08000968 <APC1_Process_Mea_Data>:

/**
  * @brief  Processes measurements received from sensor before being sent to user.
  * @retval APC1 status
  */
enum APC1_Status APC1_Process_Mea_Data(void) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0

	enum APC1_Status errorStat;

	if ((errorStat = APC1_Check_Checksum(SUM_OF_VALUES_MEA, CHECKSUM_LOW_OUTPUT_REGISTER, CHECKSUM_HIGH_OUTPUT_REGISTER)) != APC1_OK) {
 800096e:	223f      	movs	r2, #63	@ 0x3f
 8000970:	213e      	movs	r1, #62	@ 0x3e
 8000972:	203e      	movs	r0, #62	@ 0x3e
 8000974:	f000 f856 	bl	8000a24 <APC1_Check_Checksum>
 8000978:	4603      	mov	r3, r0
 800097a:	72fb      	strb	r3, [r7, #11]
 800097c:	7afb      	ldrb	r3, [r7, #11]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d007      	beq.n	8000992 <APC1_Process_Mea_Data+0x2a>
		APC1_Error_Buffer_Append(error_buffer, 8);
 8000982:	4b23      	ldr	r3, [pc, #140]	@ (8000a10 <APC1_Process_Mea_Data+0xa8>)
 8000984:	6a1b      	ldr	r3, [r3, #32]
 8000986:	4619      	mov	r1, r3
 8000988:	4822      	ldr	r0, [pc, #136]	@ (8000a14 <APC1_Process_Mea_Data+0xac>)
 800098a:	f002 fe0f 	bl	80035ac <strcat>
		return errorStat;
 800098e:	7afb      	ldrb	r3, [r7, #11]
 8000990:	e039      	b.n	8000a06 <APC1_Process_Mea_Data+0x9e>
	}

	if (APC1_Check_For_Error()) {
 8000992:	f000 f879 	bl	8000a88 <APC1_Check_For_Error>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <APC1_Process_Mea_Data+0x38>
		return APC1_ERROR_CMD; // it does not matter which error we return here, as the correct errors are reported in the error buffer
 800099c:	2381      	movs	r3, #129	@ 0x81
 800099e:	e032      	b.n	8000a06 <APC1_Process_Mea_Data+0x9e>
	}

	uint16_t index = 4, i = 0;
 80009a0:	2304      	movs	r3, #4
 80009a2:	81fb      	strh	r3, [r7, #14]
 80009a4:	2300      	movs	r3, #0
 80009a6:	81bb      	strh	r3, [r7, #12]
	uint16_t *struct_member = &processed_data.pm1_0;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <APC1_Process_Mea_Data+0xb0>)
 80009aa:	607b      	str	r3, [r7, #4]
	while (index < RS0_OUTPUT_REGISTER) {
 80009ac:	e01c      	b.n	80009e8 <APC1_Process_Mea_Data+0x80>
		if (index == RESERVED_OUTPUT_REGISTER) { // skip reserved two bytes in output data at address 0x20
 80009ae:	89fb      	ldrh	r3, [r7, #14]
 80009b0:	2b20      	cmp	r3, #32
 80009b2:	d102      	bne.n	80009ba <APC1_Process_Mea_Data+0x52>
			index += 2;
 80009b4:	89fb      	ldrh	r3, [r7, #14]
 80009b6:	3302      	adds	r3, #2
 80009b8:	81fb      	strh	r3, [r7, #14]
		}
		struct_member[i++] = APC1_Convert(buffer[index], buffer[index + 1]);
 80009ba:	89fb      	ldrh	r3, [r7, #14]
 80009bc:	4a17      	ldr	r2, [pc, #92]	@ (8000a1c <APC1_Process_Mea_Data+0xb4>)
 80009be:	5cd3      	ldrb	r3, [r2, r3]
 80009c0:	021b      	lsls	r3, r3, #8
 80009c2:	b21a      	sxth	r2, r3
 80009c4:	89fb      	ldrh	r3, [r7, #14]
 80009c6:	3301      	adds	r3, #1
 80009c8:	4914      	ldr	r1, [pc, #80]	@ (8000a1c <APC1_Process_Mea_Data+0xb4>)
 80009ca:	5ccb      	ldrb	r3, [r1, r3]
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	4313      	orrs	r3, r2
 80009d0:	b219      	sxth	r1, r3
 80009d2:	89bb      	ldrh	r3, [r7, #12]
 80009d4:	1c5a      	adds	r2, r3, #1
 80009d6:	81ba      	strh	r2, [r7, #12]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	b28a      	uxth	r2, r1
 80009e0:	801a      	strh	r2, [r3, #0]
		index += 2;
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	3302      	adds	r3, #2
 80009e6:	81fb      	strh	r3, [r7, #14]
	while (index < RS0_OUTPUT_REGISTER) {
 80009e8:	89fb      	ldrh	r3, [r7, #14]
 80009ea:	2b29      	cmp	r3, #41	@ 0x29
 80009ec:	d9df      	bls.n	80009ae <APC1_Process_Mea_Data+0x46>
	}
	processed_data.aqi = buffer[AQI_OUTPUT_REGISTER];
 80009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <APC1_Process_Mea_Data+0xb4>)
 80009f0:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 80009f4:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <APC1_Process_Mea_Data+0xb0>)
 80009f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	dev_settings.fw_vesion = buffer[VERSION_OUTPUT_REGISTER];
 80009fa:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <APC1_Process_Mea_Data+0xb4>)
 80009fc:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8000a00:	4b07      	ldr	r3, [pc, #28]	@ (8000a20 <APC1_Process_Mea_Data+0xb8>)
 8000a02:	725a      	strb	r2, [r3, #9]

	return APC1_OK;
 8000a04:	2300      	movs	r3, #0

}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000058 	.word	0x20000058
 8000a14:	200001ac 	.word	0x200001ac
 8000a18:	200002b8 	.word	0x200002b8
 8000a1c:	200000ac 	.word	0x200000ac
 8000a20:	200002ac 	.word	0x200002ac

08000a24 <APC1_Check_Checksum>:
  * @param	limit	Index of the last element + 1 which is to be used from the buffer.
  * @param	low		Lower index of the byte representing checksum in the buffer.
  * @param	high	Higher index of the byte representing checksum in the buffer.
  * @retval APC1 status
  */
enum APC1_Status APC1_Check_Checksum(int limit, int low, int high) {
 8000a24:	b480      	push	{r7}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]

	int sum = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
	for (int i = 0; i<limit; i++) {
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	e00a      	b.n	8000a50 <APC1_Check_Checksum+0x2c>
		sum += buffer[i];
 8000a3a:	4a12      	ldr	r2, [pc, #72]	@ (8000a84 <APC1_Check_Checksum+0x60>)
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	4413      	add	r3, r2
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	4413      	add	r3, r2
 8000a48:	617b      	str	r3, [r7, #20]
	for (int i = 0; i<limit; i++) {
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dbf0      	blt.n	8000a3a <APC1_Check_Checksum+0x16>
	}

	return (APC1_Convert(buffer[low], buffer[high])) == sum ? APC1_OK : APC1_ERROR_CRC;
 8000a58:	4a0a      	ldr	r2, [pc, #40]	@ (8000a84 <APC1_Check_Checksum+0x60>)
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	4908      	ldr	r1, [pc, #32]	@ (8000a84 <APC1_Check_Checksum+0x60>)
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	440a      	add	r2, r1
 8000a68:	7812      	ldrb	r2, [r2, #0]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d101      	bne.n	8000a76 <APC1_Check_Checksum+0x52>
 8000a72:	2300      	movs	r3, #0
 8000a74:	e000      	b.n	8000a78 <APC1_Check_Checksum+0x54>
 8000a76:	2380      	movs	r3, #128	@ 0x80

}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	371c      	adds	r7, #28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	200000ac 	.word	0x200000ac

08000a88 <APC1_Check_For_Error>:
  * @note	Returns an integer where 0 indicated no error, 1 indicating one or more errors.
  * 		Registered errors and their descriptions are found in the error buffer. The end
  * 		of the error buffer is always terminated by a '\0' null terminator.
  * @retval int
  */
int APC1_Check_For_Error(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0

	error_buffer[0] = '\0';
 8000a8e:	4b26      	ldr	r3, [pc, #152]	@ (8000b28 <APC1_Check_For_Error+0xa0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
	uint8_t status = buffer[ERROR_OUTPUT_REGISTER];
 8000a94:	4b25      	ldr	r3, [pc, #148]	@ (8000b2c <APC1_Check_For_Error+0xa4>)
 8000a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000a9a:	70fb      	strb	r3, [r7, #3]

	if (status == APC1_OK) {
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10e      	bne.n	8000ac0 <APC1_Check_For_Error+0x38>
		APC1_Error_Buffer_Append(error_buffer, 0);
 8000aa2:	4b23      	ldr	r3, [pc, #140]	@ (8000b30 <APC1_Check_For_Error+0xa8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	481f      	ldr	r0, [pc, #124]	@ (8000b28 <APC1_Check_For_Error+0xa0>)
 8000aaa:	f002 fd7f 	bl	80035ac <strcat>
		error_buffer[strlen(error_buffer)] = '\0';
 8000aae:	481e      	ldr	r0, [pc, #120]	@ (8000b28 <APC1_Check_For_Error+0xa0>)
 8000ab0:	f7ff fb92 	bl	80001d8 <strlen>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b28 <APC1_Check_For_Error+0xa0>)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	54d1      	strb	r1, [r2, r3]
		error_buffer[strlen(error_buffer) - 1] = '\0';

		return 1;
	}

	return 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	e02e      	b.n	8000b1e <APC1_Check_For_Error+0x96>
		for (int i = 0; i<NUM_OF_ERRORS; i++) {
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	e01f      	b.n	8000b06 <APC1_Check_For_Error+0x7e>
			if (status & APC1_Error_Masks[i]) {
 8000ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b34 <APC1_Check_For_Error+0xac>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4413      	add	r3, r2
 8000acc:	781a      	ldrb	r2, [r3, #0]
 8000ace:	78fb      	ldrb	r3, [r7, #3]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d013      	beq.n	8000b00 <APC1_Check_For_Error+0x78>
				APC1_Error_Buffer_Append(error_buffer, i);
 8000ad8:	4a15      	ldr	r2, [pc, #84]	@ (8000b30 <APC1_Check_For_Error+0xa8>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4811      	ldr	r0, [pc, #68]	@ (8000b28 <APC1_Check_For_Error+0xa0>)
 8000ae4:	f002 fd62 	bl	80035ac <strcat>
				strcat(error_buffer, ";");
 8000ae8:	480f      	ldr	r0, [pc, #60]	@ (8000b28 <APC1_Check_For_Error+0xa0>)
 8000aea:	f7ff fb75 	bl	80001d8 <strlen>
 8000aee:	4603      	mov	r3, r0
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <APC1_Check_For_Error+0xa0>)
 8000af4:	4413      	add	r3, r2
 8000af6:	4910      	ldr	r1, [pc, #64]	@ (8000b38 <APC1_Check_For_Error+0xb0>)
 8000af8:	461a      	mov	r2, r3
 8000afa:	460b      	mov	r3, r1
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	8013      	strh	r3, [r2, #0]
		for (int i = 0; i<NUM_OF_ERRORS; i++) {
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3301      	adds	r3, #1
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b08      	cmp	r3, #8
 8000b0a:	dddc      	ble.n	8000ac6 <APC1_Check_For_Error+0x3e>
		error_buffer[strlen(error_buffer) - 1] = '\0';
 8000b0c:	4806      	ldr	r0, [pc, #24]	@ (8000b28 <APC1_Check_For_Error+0xa0>)
 8000b0e:	f7ff fb63 	bl	80001d8 <strlen>
 8000b12:	4603      	mov	r3, r0
 8000b14:	3b01      	subs	r3, #1
 8000b16:	4a04      	ldr	r2, [pc, #16]	@ (8000b28 <APC1_Check_For_Error+0xa0>)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000b1c:	2301      	movs	r3, #1

}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200001ac 	.word	0x200001ac
 8000b2c:	200000ac 	.word	0x200000ac
 8000b30:	20000058 	.word	0x20000058
 8000b34:	08003760 	.word	0x08003760
 8000b38:	08003744 	.word	0x08003744

08000b3c <APC1_Get_PM1_0>:

/**
  * @brief  Get PM1.0 mass concentration.
  * @retval unsigned 16 bit value
  */
uint16_t APC1_Get_PM1_0(void) {
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

	return processed_data.pm1_0;
 8000b40:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <APC1_Get_PM1_0+0x14>)
 8000b42:	881b      	ldrh	r3, [r3, #0]

}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	200002b8 	.word	0x200002b8

08000b54 <APC1_Get_PM2_5>:

/**
  * @brief  Get PM2.5 mass concentration.
  * @retval unsigned 16 bit value
  */
uint16_t APC1_Get_PM2_5(void) {
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

	return processed_data.pm2_5;
 8000b58:	4b03      	ldr	r3, [pc, #12]	@ (8000b68 <APC1_Get_PM2_5+0x14>)
 8000b5a:	885b      	ldrh	r3, [r3, #2]

}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	200002b8 	.word	0x200002b8

08000b6c <APC1_Get_PM10>:

/**
  * @brief  Get PM10 mass concentration.
  * @retval unsigned 16 bit value
  */
uint16_t APC1_Get_PM10(void) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

	return processed_data.pm10;
 8000b70:	4b03      	ldr	r3, [pc, #12]	@ (8000b80 <APC1_Get_PM10+0x14>)
 8000b72:	889b      	ldrh	r3, [r3, #4]

}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	200002b8 	.word	0x200002b8

08000b84 <APC1_Get_PM1_0_air>:

/**
  * @brief  Get PM1.0 mass concentration in atmospheric environment.
  * @retval unsigned 16 bit value
  */
uint16_t APC1_Get_PM1_0_air(void) {
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

	return processed_data.pm1_0_air;
 8000b88:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <APC1_Get_PM1_0_air+0x14>)
 8000b8a:	88db      	ldrh	r3, [r3, #6]

}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	200002b8 	.word	0x200002b8

08000b9c <APC1_Get_PM2_5_air>:

/**
  * @brief  Get PM2.5 mass concentration in atmospheric environment.
  * @retval unsigned 16 bit value
  */
uint16_t APC1_Get_PM2_5_air(void) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

	return processed_data.pm2_5_air;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	@ (8000bb0 <APC1_Get_PM2_5_air+0x14>)
 8000ba2:	891b      	ldrh	r3, [r3, #8]

}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200002b8 	.word	0x200002b8

08000bb4 <APC1_Get_PM10_air>:

/**
  * @brief  Get PM10 mass concentration in atmospheric environment.
  * @retval unsigned 16 bit value
  */
uint16_t APC1_Get_PM10_air(void) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

	return processed_data.pm10_air;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <APC1_Get_PM10_air+0x14>)
 8000bba:	895b      	ldrh	r3, [r3, #10]

}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	200002b8 	.word	0x200002b8

08000bcc <APC1_Get_Particles_GT_0_3>:

/**
  * @brief  Get number of particles with diameter > 0.3µm in 0.1L of air.
  * @retval unsigned 16 bit value
  */
uint16_t APC1_Get_Particles_GT_0_3(void) {
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

	return processed_data.particles_0_3;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	@ (8000be0 <APC1_Get_Particles_GT_0_3+0x14>)
 8000bd2:	899b      	ldrh	r3, [r3, #12]

}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	200002b8 	.word	0x200002b8

08000be4 <APC1_Get_Particles_GT_0_5>:

/**
  * @brief  Get number of particles with diameter > 0.5µm in 0.1L of air.
  * @retval unsigned 16 bit value
  */
uint16_t APC1_Get_Particles_GT_0_5(void) {
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

	return processed_data.particles_0_5 - processed_data.particles_0_3;
 8000be8:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <APC1_Get_Particles_GT_0_5+0x1c>)
 8000bea:	89da      	ldrh	r2, [r3, #14]
 8000bec:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <APC1_Get_Particles_GT_0_5+0x1c>)
 8000bee:	899b      	ldrh	r3, [r3, #12]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	b29b      	uxth	r3, r3

}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	200002b8 	.word	0x200002b8

08000c04 <APC1_Get_Particles_GT_1_0>:

/**
  * @brief  Get number of particles with diameter > 1.0µm in 0.1L of air.
  * @retval unsigned 16 bit value
  */
uint16_t APC1_Get_Particles_GT_1_0(void) {
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

	return processed_data.particles_1_0 - processed_data.particles_0_3;
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <APC1_Get_Particles_GT_1_0+0x1c>)
 8000c0a:	8a1a      	ldrh	r2, [r3, #16]
 8000c0c:	4b04      	ldr	r3, [pc, #16]	@ (8000c20 <APC1_Get_Particles_GT_1_0+0x1c>)
 8000c0e:	899b      	ldrh	r3, [r3, #12]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	b29b      	uxth	r3, r3

}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200002b8 	.word	0x200002b8

08000c24 <APC1_Get_Particles_GT_2_5>:

/**
  * @brief  Get number of particles with diameter > 2.5µm in 0.1L of air.
  * @retval unsigned 16 bit value
  */
uint16_t APC1_Get_Particles_GT_2_5(void) {
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

	return processed_data.particles_2_5 - processed_data.particles_0_3;
 8000c28:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <APC1_Get_Particles_GT_2_5+0x1c>)
 8000c2a:	8a5a      	ldrh	r2, [r3, #18]
 8000c2c:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <APC1_Get_Particles_GT_2_5+0x1c>)
 8000c2e:	899b      	ldrh	r3, [r3, #12]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	b29b      	uxth	r3, r3

}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	200002b8 	.word	0x200002b8

08000c44 <APC1_Get_Particles_GT_5_0>:

/**
  * @brief  Get number of particles with diameter > 5.0µm in 0.1L of air.
  * @retval unsigned 16 bit value
  */
uint16_t APC1_Get_Particles_GT_5_0(void) {
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

	return processed_data.particles_5_0 - processed_data.particles_0_3;
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <APC1_Get_Particles_GT_5_0+0x1c>)
 8000c4a:	8a9a      	ldrh	r2, [r3, #20]
 8000c4c:	4b04      	ldr	r3, [pc, #16]	@ (8000c60 <APC1_Get_Particles_GT_5_0+0x1c>)
 8000c4e:	899b      	ldrh	r3, [r3, #12]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	b29b      	uxth	r3, r3

}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	200002b8 	.word	0x200002b8

08000c64 <APC1_Get_Particles_GT_10>:

/**
  * @brief  Get number of particles with diameter > 10µm in 0.1L of air.
  * @retval unsigned 16 bit value
  */
uint16_t APC1_Get_Particles_GT_10(void) {
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

	return processed_data.particles_10 - processed_data.particles_0_3;
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <APC1_Get_Particles_GT_10+0x1c>)
 8000c6a:	8ada      	ldrh	r2, [r3, #22]
 8000c6c:	4b04      	ldr	r3, [pc, #16]	@ (8000c80 <APC1_Get_Particles_GT_10+0x1c>)
 8000c6e:	899b      	ldrh	r3, [r3, #12]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	b29b      	uxth	r3, r3

}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200002b8 	.word	0x200002b8

08000c84 <APC1_Get_TVOC>:

/**
  * @brief  Get TVOC output.
  * @retval unsigned 16 bit value
  */
uint16_t APC1_Get_TVOC(void) {
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

	return processed_data.TVOC;
 8000c88:	4b03      	ldr	r3, [pc, #12]	@ (8000c98 <APC1_Get_TVOC+0x14>)
 8000c8a:	8b1b      	ldrh	r3, [r3, #24]

}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	200002b8 	.word	0x200002b8

08000c9c <APC1_Get_eCO2>:

/**
  * @brief  Get output in ppm CO2 equivalents.
  * @retval unsigned 16 bit value
  */
uint16_t APC1_Get_eCO2(void) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

	return processed_data.eCO2;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	@ (8000cb0 <APC1_Get_eCO2+0x14>)
 8000ca2:	8b5b      	ldrh	r3, [r3, #26]

}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	200002b8 	.word	0x200002b8

08000cb4 <APC1_Get_T_Comp>:

/**
  * @brief  Get compensated temperature in °C.
  * @retval double
  */
double APC1_Get_T_Comp(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

	return processed_data.t_comp * 0.1f;
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <APC1_Get_T_Comp+0x34>)
 8000cba:	8b9b      	ldrh	r3, [r3, #28]
 8000cbc:	ee07 3a90 	vmov	s15, r3
 8000cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc4:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000cec <APC1_Get_T_Comp+0x38>
 8000cc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ccc:	ee17 0a90 	vmov	r0, s15
 8000cd0:	f7ff fbee 	bl	80004b0 <__aeabi_f2d>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	ec43 2b17 	vmov	d7, r2, r3

}
 8000cdc:	eeb0 0a47 	vmov.f32	s0, s14
 8000ce0:	eef0 0a67 	vmov.f32	s1, s15
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200002b8 	.word	0x200002b8
 8000cec:	3dcccccd 	.word	0x3dcccccd

08000cf0 <APC1_Get_RH_Comp>:

/**
  * @brief  Get compensated RH in %.
  * @retval double
  */
double APC1_Get_RH_Comp(void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

	return processed_data.rh_comp * 0.1f;
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <APC1_Get_RH_Comp+0x34>)
 8000cf6:	8bdb      	ldrh	r3, [r3, #30]
 8000cf8:	ee07 3a90 	vmov	s15, r3
 8000cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d00:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000d28 <APC1_Get_RH_Comp+0x38>
 8000d04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d08:	ee17 0a90 	vmov	r0, s15
 8000d0c:	f7ff fbd0 	bl	80004b0 <__aeabi_f2d>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	ec43 2b17 	vmov	d7, r2, r3

}
 8000d18:	eeb0 0a47 	vmov.f32	s0, s14
 8000d1c:	eef0 0a67 	vmov.f32	s1, s15
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200002b8 	.word	0x200002b8
 8000d28:	3dcccccd 	.word	0x3dcccccd

08000d2c <APC1_Get_T_Raw>:

/**
  * @brief  Get uncompensated temperature in °C.
  * @retval double
  */
double APC1_Get_T_Raw(void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

	return processed_data.t_raw * 0.1f;
 8000d30:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <APC1_Get_T_Raw+0x34>)
 8000d32:	8c1b      	ldrh	r3, [r3, #32]
 8000d34:	ee07 3a90 	vmov	s15, r3
 8000d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d3c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000d64 <APC1_Get_T_Raw+0x38>
 8000d40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d44:	ee17 0a90 	vmov	r0, s15
 8000d48:	f7ff fbb2 	bl	80004b0 <__aeabi_f2d>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	ec43 2b17 	vmov	d7, r2, r3

}
 8000d54:	eeb0 0a47 	vmov.f32	s0, s14
 8000d58:	eef0 0a67 	vmov.f32	s1, s15
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200002b8 	.word	0x200002b8
 8000d64:	3dcccccd 	.word	0x3dcccccd

08000d68 <APC1_Get_RH_Raw>:

/**
  * @brief  Get uncompensated RH in %.
  * @retval double
  */
double APC1_Get_RH_Raw(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

	return processed_data.rh_raw * 0.1f;
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <APC1_Get_RH_Raw+0x34>)
 8000d6e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000d70:	ee07 3a90 	vmov	s15, r3
 8000d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d78:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000da0 <APC1_Get_RH_Raw+0x38>
 8000d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d80:	ee17 0a90 	vmov	r0, s15
 8000d84:	f7ff fb94 	bl	80004b0 <__aeabi_f2d>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	ec43 2b17 	vmov	d7, r2, r3

}
 8000d90:	eeb0 0a47 	vmov.f32	s0, s14
 8000d94:	eef0 0a67 	vmov.f32	s1, s15
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200002b8 	.word	0x200002b8
 8000da0:	3dcccccd 	.word	0x3dcccccd

08000da4 <APC1_Get_AQI>:

/**
  * @brief  Get Air Quality Index according to UBA Classification of TVOC value.
  * @retval unsigned 8 bit value
  */
uint8_t	APC1_Get_AQI(void) {
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

	return processed_data.aqi;
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <APC1_Get_AQI+0x14>)
 8000daa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24

}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	200002b8 	.word	0x200002b8

08000dbc <APC1_Get_AQI_String>:

/**
  * @brief  Get Air Quality Index according to UBA Classification of TVOC value as describing string.
  * @retval char*
  */
const char *APC1_Get_AQI_String(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0

	// if somehow we get a wrong index
	uint8_t index = APC1_Get_AQI();
 8000dc2:	f7ff ffef 	bl	8000da4 <APC1_Get_AQI>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
	return (index <= 5 && index >= 1) ? APC1_AQI_Strings[index - 1] : "Index out of bounds\0";
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	2b05      	cmp	r3, #5
 8000dce:	d808      	bhi.n	8000de2 <APC1_Get_AQI_String+0x26>
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d005      	beq.n	8000de2 <APC1_Get_AQI_String+0x26>
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	4a04      	ldr	r2, [pc, #16]	@ (8000dec <APC1_Get_AQI_String+0x30>)
 8000ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de0:	e000      	b.n	8000de4 <APC1_Get_AQI_String+0x28>
 8000de2:	4b03      	ldr	r3, [pc, #12]	@ (8000df0 <APC1_Get_AQI_String+0x34>)

}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000044 	.word	0x20000044
 8000df0:	08003748 	.word	0x08003748

08000df4 <APC1_Get_Error_String>:

/**
  * @brief  Get error value as describing string.
  * @retval char*
  */
char *APC1_Get_Error_String(void) {
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

	return error_buffer;
 8000df8:	4b02      	ldr	r3, [pc, #8]	@ (8000e04 <APC1_Get_Error_String+0x10>)

}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	200001ac 	.word	0x200001ac

08000e08 <HAL_UART_RxCpltCallback>:

/**
  * @brief  Full callback for USART receive by interrupt.
  * @note	Sets flag indicating a full reception of values from sensor.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

	if (huart == dev_settings.sensor_uart) {
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <HAL_UART_RxCpltCallback+0x24>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d102      	bne.n	8000e20 <HAL_UART_RxCpltCallback+0x18>
		dev_settings.received_response = 1;
 8000e1a:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <HAL_UART_RxCpltCallback+0x24>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	605a      	str	r2, [r3, #4]
	}

}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	200002ac 	.word	0x200002ac

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e34:	f000 faca 	bl	80013cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e38:	f000 f8cc 	bl	8000fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3c:	f000 f95e 	bl	80010fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e40:	f000 f932 	bl	80010a8 <MX_USART1_UART_Init>
   * Example program to initialize sensor
   * and read measurement data every two seconds.
   */

  // Initialize sensor
  if (APC1_Init_Sensor(&huart1) != APC1_OK) {
 8000e44:	484d      	ldr	r0, [pc, #308]	@ (8000f7c <main+0x14c>)
 8000e46:	f7ff fd03 	bl	8000850 <APC1_Init_Sensor>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <main+0x24>
	  Error_Handler();
 8000e50:	f000 f9c2 	bl	80011d8 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // get latest measurement data
	  if (APC1_Read_Mea_Data() != APC1_OK) {
 8000e54:	f7ff fd54 	bl	8000900 <APC1_Read_Mea_Data>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <main+0x32>
		  Error_Handler();
 8000e5e:	f000 f9bb 	bl	80011d8 <Error_Handler>
	  }
	  T_pm1_0 = APC1_Get_PM1_0();
 8000e62:	f7ff fe6b 	bl	8000b3c <APC1_Get_PM1_0>
 8000e66:	4603      	mov	r3, r0
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b45      	ldr	r3, [pc, #276]	@ (8000f80 <main+0x150>)
 8000e6c:	801a      	strh	r2, [r3, #0]
	  T_pm2_5 = APC1_Get_PM2_5();
 8000e6e:	f7ff fe71 	bl	8000b54 <APC1_Get_PM2_5>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b43      	ldr	r3, [pc, #268]	@ (8000f84 <main+0x154>)
 8000e78:	801a      	strh	r2, [r3, #0]
	  T_pm10 = APC1_Get_PM10();
 8000e7a:	f7ff fe77 	bl	8000b6c <APC1_Get_PM10>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b41      	ldr	r3, [pc, #260]	@ (8000f88 <main+0x158>)
 8000e84:	801a      	strh	r2, [r3, #0]
	  T_pm1_0_air = APC1_Get_PM1_0_air();
 8000e86:	f7ff fe7d 	bl	8000b84 <APC1_Get_PM1_0_air>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f8c <main+0x15c>)
 8000e90:	801a      	strh	r2, [r3, #0]
	  T_pm2_5_air = APC1_Get_PM2_5_air();
 8000e92:	f7ff fe83 	bl	8000b9c <APC1_Get_PM2_5_air>
 8000e96:	4603      	mov	r3, r0
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f90 <main+0x160>)
 8000e9c:	801a      	strh	r2, [r3, #0]
	  T_pm10_air = APC1_Get_PM10_air();
 8000e9e:	f7ff fe89 	bl	8000bb4 <APC1_Get_PM10_air>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8000f94 <main+0x164>)
 8000ea8:	801a      	strh	r2, [r3, #0]
	  T_particles_0_3 = APC1_Get_Particles_GT_0_3();
 8000eaa:	f7ff fe8f 	bl	8000bcc <APC1_Get_Particles_GT_0_3>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b39      	ldr	r3, [pc, #228]	@ (8000f98 <main+0x168>)
 8000eb4:	801a      	strh	r2, [r3, #0]
	  T_particles_0_5 = APC1_Get_Particles_GT_0_5();
 8000eb6:	f7ff fe95 	bl	8000be4 <APC1_Get_Particles_GT_0_5>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b37      	ldr	r3, [pc, #220]	@ (8000f9c <main+0x16c>)
 8000ec0:	801a      	strh	r2, [r3, #0]
	  T_particles_1_0 = APC1_Get_Particles_GT_1_0();
 8000ec2:	f7ff fe9f 	bl	8000c04 <APC1_Get_Particles_GT_1_0>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b35      	ldr	r3, [pc, #212]	@ (8000fa0 <main+0x170>)
 8000ecc:	801a      	strh	r2, [r3, #0]
	  T_particles_2_5 = APC1_Get_Particles_GT_2_5();
 8000ece:	f7ff fea9 	bl	8000c24 <APC1_Get_Particles_GT_2_5>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b33      	ldr	r3, [pc, #204]	@ (8000fa4 <main+0x174>)
 8000ed8:	801a      	strh	r2, [r3, #0]
	  T_particles_5_0 = APC1_Get_Particles_GT_5_0();
 8000eda:	f7ff feb3 	bl	8000c44 <APC1_Get_Particles_GT_5_0>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b31      	ldr	r3, [pc, #196]	@ (8000fa8 <main+0x178>)
 8000ee4:	801a      	strh	r2, [r3, #0]
	  T_particles_10 = APC1_Get_Particles_GT_10();
 8000ee6:	f7ff febd 	bl	8000c64 <APC1_Get_Particles_GT_10>
 8000eea:	4603      	mov	r3, r0
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b2f      	ldr	r3, [pc, #188]	@ (8000fac <main+0x17c>)
 8000ef0:	801a      	strh	r2, [r3, #0]
	  T_TVOC = APC1_Get_TVOC();
 8000ef2:	f7ff fec7 	bl	8000c84 <APC1_Get_TVOC>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb0 <main+0x180>)
 8000efc:	801a      	strh	r2, [r3, #0]
	  T_eCO2 = APC1_Get_eCO2();
 8000efe:	f7ff fecd 	bl	8000c9c <APC1_Get_eCO2>
 8000f02:	4603      	mov	r3, r0
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb4 <main+0x184>)
 8000f08:	801a      	strh	r2, [r3, #0]
	  T_t_comp = APC1_Get_T_Comp();
 8000f0a:	f7ff fed3 	bl	8000cb4 <APC1_Get_T_Comp>
 8000f0e:	eeb0 7a40 	vmov.f32	s14, s0
 8000f12:	eef0 7a60 	vmov.f32	s15, s1
 8000f16:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <main+0x188>)
 8000f18:	ed83 7b00 	vstr	d7, [r3]
	  T_rh_comp = APC1_Get_RH_Comp();
 8000f1c:	f7ff fee8 	bl	8000cf0 <APC1_Get_RH_Comp>
 8000f20:	eeb0 7a40 	vmov.f32	s14, s0
 8000f24:	eef0 7a60 	vmov.f32	s15, s1
 8000f28:	4b24      	ldr	r3, [pc, #144]	@ (8000fbc <main+0x18c>)
 8000f2a:	ed83 7b00 	vstr	d7, [r3]
	  T_t_raw = APC1_Get_T_Raw();
 8000f2e:	f7ff fefd 	bl	8000d2c <APC1_Get_T_Raw>
 8000f32:	eeb0 7a40 	vmov.f32	s14, s0
 8000f36:	eef0 7a60 	vmov.f32	s15, s1
 8000f3a:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <main+0x190>)
 8000f3c:	ed83 7b00 	vstr	d7, [r3]
	  T_rh_raw = APC1_Get_RH_Raw();
 8000f40:	f7ff ff12 	bl	8000d68 <APC1_Get_RH_Raw>
 8000f44:	eeb0 7a40 	vmov.f32	s14, s0
 8000f48:	eef0 7a60 	vmov.f32	s15, s1
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc4 <main+0x194>)
 8000f4e:	ed83 7b00 	vstr	d7, [r3]
	  T_aqi = APC1_Get_AQI();
 8000f52:	f7ff ff27 	bl	8000da4 <APC1_Get_AQI>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <main+0x198>)
 8000f5c:	701a      	strb	r2, [r3, #0]
	  aqi_string = APC1_Get_AQI_String();
 8000f5e:	f7ff ff2d 	bl	8000dbc <APC1_Get_AQI_String>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4a19      	ldr	r2, [pc, #100]	@ (8000fcc <main+0x19c>)
 8000f66:	6013      	str	r3, [r2, #0]
	  error_string = APC1_Get_Error_String();
 8000f68:	f7ff ff44 	bl	8000df4 <APC1_Get_Error_String>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4a18      	ldr	r2, [pc, #96]	@ (8000fd0 <main+0x1a0>)
 8000f70:	6013      	str	r3, [r2, #0]
	  HAL_Delay(2000);
 8000f72:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f76:	f000 fa9b 	bl	80014b0 <HAL_Delay>
	  if (APC1_Read_Mea_Data() != APC1_OK) {
 8000f7a:	e76b      	b.n	8000e54 <main+0x24>
 8000f7c:	2000032c 	.word	0x2000032c
 8000f80:	200002de 	.word	0x200002de
 8000f84:	200002e0 	.word	0x200002e0
 8000f88:	200002e2 	.word	0x200002e2
 8000f8c:	200002e4 	.word	0x200002e4
 8000f90:	200002e6 	.word	0x200002e6
 8000f94:	200002e8 	.word	0x200002e8
 8000f98:	200002ea 	.word	0x200002ea
 8000f9c:	200002ec 	.word	0x200002ec
 8000fa0:	200002ee 	.word	0x200002ee
 8000fa4:	200002f0 	.word	0x200002f0
 8000fa8:	200002f2 	.word	0x200002f2
 8000fac:	200002f4 	.word	0x200002f4
 8000fb0:	200002f6 	.word	0x200002f6
 8000fb4:	200002f8 	.word	0x200002f8
 8000fb8:	20000300 	.word	0x20000300
 8000fbc:	20000308 	.word	0x20000308
 8000fc0:	20000310 	.word	0x20000310
 8000fc4:	20000318 	.word	0x20000318
 8000fc8:	20000328 	.word	0x20000328
 8000fcc:	20000320 	.word	0x20000320
 8000fd0:	20000324 	.word	0x20000324

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b094      	sub	sp, #80	@ 0x50
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	2230      	movs	r2, #48	@ 0x30
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fada 	bl	800359c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	4b28      	ldr	r3, [pc, #160]	@ (80010a0 <SystemClock_Config+0xcc>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001000:	4a27      	ldr	r2, [pc, #156]	@ (80010a0 <SystemClock_Config+0xcc>)
 8001002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001006:	6413      	str	r3, [r2, #64]	@ 0x40
 8001008:	4b25      	ldr	r3, [pc, #148]	@ (80010a0 <SystemClock_Config+0xcc>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	4b22      	ldr	r3, [pc, #136]	@ (80010a4 <SystemClock_Config+0xd0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a21      	ldr	r2, [pc, #132]	@ (80010a4 <SystemClock_Config+0xd0>)
 800101e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <SystemClock_Config+0xd0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001030:	2302      	movs	r3, #2
 8001032:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001034:	2301      	movs	r3, #1
 8001036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001038:	2310      	movs	r3, #16
 800103a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103c:	2302      	movs	r3, #2
 800103e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001040:	2300      	movs	r3, #0
 8001042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001044:	2310      	movs	r3, #16
 8001046:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001048:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800104c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800104e:	2304      	movs	r3, #4
 8001050:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001052:	2304      	movs	r3, #4
 8001054:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001056:	f107 0320 	add.w	r3, r7, #32
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fd8e 	bl	8001b7c <HAL_RCC_OscConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001066:	f000 f8b7 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106a:	230f      	movs	r3, #15
 800106c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106e:	2302      	movs	r3, #2
 8001070:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001076:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800107a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2102      	movs	r1, #2
 8001086:	4618      	mov	r0, r3
 8001088:	f000 fff0 	bl	800206c <HAL_RCC_ClockConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001092:	f000 f8a1 	bl	80011d8 <Error_Handler>
  }
}
 8001096:	bf00      	nop
 8001098:	3750      	adds	r7, #80	@ 0x50
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40007000 	.word	0x40007000

080010a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <MX_USART1_UART_Init+0x4c>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <MX_USART1_UART_Init+0x50>)
 80010b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010b2:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <MX_USART1_UART_Init+0x4c>)
 80010b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <MX_USART1_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_USART1_UART_Init+0x4c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <MX_USART1_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010cc:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_USART1_UART_Init+0x4c>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d2:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <MX_USART1_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_USART1_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010de:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <MX_USART1_UART_Init+0x4c>)
 80010e0:	f001 f9e4 	bl	80024ac <HAL_UART_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010ea:	f000 f875 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000032c 	.word	0x2000032c
 80010f8:	40011000 	.word	0x40011000

080010fc <MX_GPIO_Init>:
/**
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b2d      	ldr	r3, [pc, #180]	@ (80011cc <MX_GPIO_Init+0xd0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a2c      	ldr	r2, [pc, #176]	@ (80011cc <MX_GPIO_Init+0xd0>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b2a      	ldr	r3, [pc, #168]	@ (80011cc <MX_GPIO_Init+0xd0>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b26      	ldr	r3, [pc, #152]	@ (80011cc <MX_GPIO_Init+0xd0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a25      	ldr	r2, [pc, #148]	@ (80011cc <MX_GPIO_Init+0xd0>)
 8001138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b23      	ldr	r3, [pc, #140]	@ (80011cc <MX_GPIO_Init+0xd0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <MX_GPIO_Init+0xd0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a1e      	ldr	r2, [pc, #120]	@ (80011cc <MX_GPIO_Init+0xd0>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <MX_GPIO_Init+0xd0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <MX_GPIO_Init+0xd0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a17      	ldr	r2, [pc, #92]	@ (80011cc <MX_GPIO_Init+0xd0>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <MX_GPIO_Init+0xd0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	2120      	movs	r1, #32
 8001186:	4812      	ldr	r0, [pc, #72]	@ (80011d0 <MX_GPIO_Init+0xd4>)
 8001188:	f000 fcde 	bl	8001b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800118c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001192:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <MX_GPIO_Init+0xd8>)
 80011a4:	f000 fb4c 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011a8:	2320      	movs	r3, #32
 80011aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <MX_GPIO_Init+0xd4>)
 80011c0:	f000 fb3e 	bl	8001840 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	@ 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020800 	.word	0x40020800

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  // if error occurs, then read its string
	  error_string = APC1_Get_Error_String();
 80011e0:	f7ff fe08 	bl	8000df4 <APC1_Get_Error_String>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4a01      	ldr	r2, [pc, #4]	@ (80011ec <Error_Handler+0x14>)
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e7f9      	b.n	80011e0 <Error_Handler+0x8>
 80011ec:	20000324 	.word	0x20000324

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b10      	ldr	r3, [pc, #64]	@ (800123c <HAL_MspInit+0x4c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fe:	4a0f      	ldr	r2, [pc, #60]	@ (800123c <HAL_MspInit+0x4c>)
 8001200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001204:	6453      	str	r3, [r2, #68]	@ 0x44
 8001206:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <HAL_MspInit+0x4c>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <HAL_MspInit+0x4c>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	4a08      	ldr	r2, [pc, #32]	@ (800123c <HAL_MspInit+0x4c>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001220:	6413      	str	r3, [r2, #64]	@ 0x40
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_MspInit+0x4c>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800122e:	2007      	movs	r0, #7
 8001230:	f000 fa32 	bl	8001698 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	@ 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a1d      	ldr	r2, [pc, #116]	@ (80012d4 <HAL_UART_MspInit+0x94>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d134      	bne.n	80012cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <HAL_UART_MspInit+0x98>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	4a1b      	ldr	r2, [pc, #108]	@ (80012d8 <HAL_UART_MspInit+0x98>)
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	6453      	str	r3, [r2, #68]	@ 0x44
 8001272:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <HAL_UART_MspInit+0x98>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <HAL_UART_MspInit+0x98>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a14      	ldr	r2, [pc, #80]	@ (80012d8 <HAL_UART_MspInit+0x98>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <HAL_UART_MspInit+0x98>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800129a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012ac:	2307      	movs	r3, #7
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	4809      	ldr	r0, [pc, #36]	@ (80012dc <HAL_UART_MspInit+0x9c>)
 80012b8:	f000 fac2 	bl	8001840 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	2025      	movs	r0, #37	@ 0x25
 80012c2:	f000 f9f4 	bl	80016ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012c6:	2025      	movs	r0, #37	@ 0x25
 80012c8:	f000 fa0d 	bl	80016e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	@ 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40011000 	.word	0x40011000
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <NMI_Handler+0x4>

080012e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <MemManage_Handler+0x4>

080012f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <UsageFault_Handler+0x4>

08001308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001336:	f000 f89b 	bl	8001470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	//	// uint8_t new_c = USART1->DR;
	//	rx[my_index++] = USART1->DR;
	//}

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <USART1_IRQHandler+0x10>)
 8001346:	f001 f9c1 	bl	80026cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2000032c 	.word	0x2000032c

08001354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <SystemInit+0x20>)
 800135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800135e:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <SystemInit+0x20>)
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001378:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800137c:	480d      	ldr	r0, [pc, #52]	@ (80013b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800137e:	490e      	ldr	r1, [pc, #56]	@ (80013b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001380:	4a0e      	ldr	r2, [pc, #56]	@ (80013bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0b      	ldr	r2, [pc, #44]	@ (80013c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001394:	4c0b      	ldr	r4, [pc, #44]	@ (80013c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013a2:	f7ff ffd7 	bl	8001354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a6:	f002 f911 	bl	80035cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013aa:	f7ff fd41 	bl	8000e30 <main>
  bx  lr    
 80013ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80013bc:	08003794 	.word	0x08003794
  ldr r2, =_sbss
 80013c0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80013c4:	20000374 	.word	0x20000374

080013c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC_IRQHandler>
	...

080013cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d0:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <HAL_Init+0x40>)
 80013d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013dc:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <HAL_Init+0x40>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0a      	ldr	r2, [pc, #40]	@ (800140c <HAL_Init+0x40>)
 80013e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e8:	4b08      	ldr	r3, [pc, #32]	@ (800140c <HAL_Init+0x40>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a07      	ldr	r2, [pc, #28]	@ (800140c <HAL_Init+0x40>)
 80013ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 f94f 	bl	8001698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f000 f808 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001400:	f7ff fef6 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023c00 	.word	0x40023c00

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_InitTick+0x54>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <HAL_InitTick+0x58>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001426:	fbb3 f3f1 	udiv	r3, r3, r1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f967 	bl	8001702 <HAL_SYSTICK_Config>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e00e      	b.n	800145c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d80a      	bhi.n	800145a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f000 f92f 	bl	80016ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001450:	4a06      	ldr	r2, [pc, #24]	@ (800146c <HAL_InitTick+0x5c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000084 	.word	0x20000084
 8001468:	2000008c 	.word	0x2000008c
 800146c:	20000088 	.word	0x20000088

08001470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_IncTick+0x20>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <HAL_IncTick+0x24>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <HAL_IncTick+0x24>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	2000008c 	.word	0x2000008c
 8001494:	20000370 	.word	0x20000370

08001498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;
 800149c:	4b03      	ldr	r3, [pc, #12]	@ (80014ac <HAL_GetTick+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000370 	.word	0x20000370

080014b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b8:	f7ff ffee 	bl	8001498 <HAL_GetTick>
 80014bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c8:	d005      	beq.n	80014d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ca:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_Delay+0x44>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014d6:	bf00      	nop
 80014d8:	f7ff ffde 	bl	8001498 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d8f7      	bhi.n	80014d8 <HAL_Delay+0x28>
  {
  }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000008c 	.word	0x2000008c

080014f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001514:	4013      	ands	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001520:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152a:	4a04      	ldr	r2, [pc, #16]	@ (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	60d3      	str	r3, [r2, #12]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <__NVIC_GetPriorityGrouping+0x18>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	f003 0307 	and.w	r3, r3, #7
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	2b00      	cmp	r3, #0
 800156c:	db0b      	blt.n	8001586 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f003 021f 	and.w	r2, r3, #31
 8001574:	4907      	ldr	r1, [pc, #28]	@ (8001594 <__NVIC_EnableIRQ+0x38>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	2001      	movs	r0, #1
 800157e:	fa00 f202 	lsl.w	r2, r0, r2
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000e100 	.word	0xe000e100

08001598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0a      	blt.n	80015c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	490c      	ldr	r1, [pc, #48]	@ (80015e4 <__NVIC_SetPriority+0x4c>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c0:	e00a      	b.n	80015d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4908      	ldr	r1, [pc, #32]	@ (80015e8 <__NVIC_SetPriority+0x50>)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	3b04      	subs	r3, #4
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	440b      	add	r3, r1
 80015d6:	761a      	strb	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	@ 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf28      	it	cs
 800160a:	2304      	movcs	r3, #4
 800160c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	2b06      	cmp	r3, #6
 8001614:	d902      	bls.n	800161c <NVIC_EncodePriority+0x30>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b03      	subs	r3, #3
 800161a:	e000      	b.n	800161e <NVIC_EncodePriority+0x32>
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43d9      	mvns	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	4313      	orrs	r3, r2
         );
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	@ 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001664:	d301      	bcc.n	800166a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001666:	2301      	movs	r3, #1
 8001668:	e00f      	b.n	800168a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <SysTick_Config+0x40>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001672:	210f      	movs	r1, #15
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f7ff ff8e 	bl	8001598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <SysTick_Config+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001682:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <SysTick_Config+0x40>)
 8001684:	2207      	movs	r2, #7
 8001686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	e000e010 	.word	0xe000e010

08001698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff29 	bl	80014f8 <__NVIC_SetPriorityGrouping>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c0:	f7ff ff3e 	bl	8001540 <__NVIC_GetPriorityGrouping>
 80016c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	6978      	ldr	r0, [r7, #20]
 80016cc:	f7ff ff8e 	bl	80015ec <NVIC_EncodePriority>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff5d 	bl	8001598 <__NVIC_SetPriority>
}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff31 	bl	800155c <__NVIC_EnableIRQ>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ffa2 	bl	8001654 <SysTick_Config>
 8001710:	4603      	mov	r3, r0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001726:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff feb6 	bl	8001498 <HAL_GetTick>
 800172c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d008      	beq.n	800174c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2280      	movs	r2, #128	@ 0x80
 800173e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e052      	b.n	80017f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0216 	bic.w	r2, r2, #22
 800175a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	695a      	ldr	r2, [r3, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800176a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001770:	2b00      	cmp	r3, #0
 8001772:	d103      	bne.n	800177c <HAL_DMA_Abort+0x62>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001778:	2b00      	cmp	r3, #0
 800177a:	d007      	beq.n	800178c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0208 	bic.w	r2, r2, #8
 800178a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0201 	bic.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800179c:	e013      	b.n	80017c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800179e:	f7ff fe7b 	bl	8001498 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b05      	cmp	r3, #5
 80017aa:	d90c      	bls.n	80017c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2220      	movs	r2, #32
 80017b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2203      	movs	r2, #3
 80017b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e015      	b.n	80017f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1e4      	bne.n	800179e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d8:	223f      	movs	r2, #63	@ 0x3f
 80017da:	409a      	lsls	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d004      	beq.n	8001818 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2280      	movs	r2, #128	@ 0x80
 8001812:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e00c      	b.n	8001832 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2205      	movs	r2, #5
 800181c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	@ 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	e159      	b.n	8001b10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	429a      	cmp	r2, r3
 8001876:	f040 8148 	bne.w	8001b0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b01      	cmp	r3, #1
 8001884:	d005      	beq.n	8001892 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800188e:	2b02      	cmp	r3, #2
 8001890:	d130      	bne.n	80018f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	2203      	movs	r2, #3
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c8:	2201      	movs	r2, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 0201 	and.w	r2, r3, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d017      	beq.n	8001930 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	2203      	movs	r2, #3
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d123      	bne.n	8001984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	08da      	lsrs	r2, r3, #3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3208      	adds	r2, #8
 8001944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	220f      	movs	r2, #15
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	08da      	lsrs	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3208      	adds	r2, #8
 800197e:	69b9      	ldr	r1, [r7, #24]
 8001980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0203 	and.w	r2, r3, #3
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80a2 	beq.w	8001b0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b57      	ldr	r3, [pc, #348]	@ (8001b28 <HAL_GPIO_Init+0x2e8>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ce:	4a56      	ldr	r2, [pc, #344]	@ (8001b28 <HAL_GPIO_Init+0x2e8>)
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d6:	4b54      	ldr	r3, [pc, #336]	@ (8001b28 <HAL_GPIO_Init+0x2e8>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019e2:	4a52      	ldr	r2, [pc, #328]	@ (8001b2c <HAL_GPIO_Init+0x2ec>)
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	220f      	movs	r2, #15
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a49      	ldr	r2, [pc, #292]	@ (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d019      	beq.n	8001a42 <HAL_GPIO_Init+0x202>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a48      	ldr	r2, [pc, #288]	@ (8001b34 <HAL_GPIO_Init+0x2f4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <HAL_GPIO_Init+0x1fe>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a47      	ldr	r2, [pc, #284]	@ (8001b38 <HAL_GPIO_Init+0x2f8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00d      	beq.n	8001a3a <HAL_GPIO_Init+0x1fa>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a46      	ldr	r2, [pc, #280]	@ (8001b3c <HAL_GPIO_Init+0x2fc>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d007      	beq.n	8001a36 <HAL_GPIO_Init+0x1f6>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a45      	ldr	r2, [pc, #276]	@ (8001b40 <HAL_GPIO_Init+0x300>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d101      	bne.n	8001a32 <HAL_GPIO_Init+0x1f2>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	e008      	b.n	8001a44 <HAL_GPIO_Init+0x204>
 8001a32:	2307      	movs	r3, #7
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x204>
 8001a36:	2303      	movs	r3, #3
 8001a38:	e004      	b.n	8001a44 <HAL_GPIO_Init+0x204>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x204>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x204>
 8001a42:	2300      	movs	r3, #0
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	f002 0203 	and.w	r2, r2, #3
 8001a4a:	0092      	lsls	r2, r2, #2
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a54:	4935      	ldr	r1, [pc, #212]	@ (8001b2c <HAL_GPIO_Init+0x2ec>)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a62:	4b38      	ldr	r3, [pc, #224]	@ (8001b44 <HAL_GPIO_Init+0x304>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a86:	4a2f      	ldr	r2, [pc, #188]	@ (8001b44 <HAL_GPIO_Init+0x304>)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b44 <HAL_GPIO_Init+0x304>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab0:	4a24      	ldr	r2, [pc, #144]	@ (8001b44 <HAL_GPIO_Init+0x304>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ab6:	4b23      	ldr	r3, [pc, #140]	@ (8001b44 <HAL_GPIO_Init+0x304>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ada:	4a1a      	ldr	r2, [pc, #104]	@ (8001b44 <HAL_GPIO_Init+0x304>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae0:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <HAL_GPIO_Init+0x304>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b04:	4a0f      	ldr	r2, [pc, #60]	@ (8001b44 <HAL_GPIO_Init+0x304>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	2b0f      	cmp	r3, #15
 8001b14:	f67f aea2 	bls.w	800185c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3724      	adds	r7, #36	@ 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40013800 	.word	0x40013800
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40020c00 	.word	0x40020c00
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40013c00 	.word	0x40013c00

08001b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]
 8001b54:	4613      	mov	r3, r2
 8001b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b58:	787b      	ldrb	r3, [r7, #1]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b64:	e003      	b.n	8001b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b66:	887b      	ldrh	r3, [r7, #2]
 8001b68:	041a      	lsls	r2, r3, #16
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	619a      	str	r2, [r3, #24]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e267      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d075      	beq.n	8001c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b9a:	4b88      	ldr	r3, [pc, #544]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d00c      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba6:	4b85      	ldr	r3, [pc, #532]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d112      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bb2:	4b82      	ldr	r3, [pc, #520]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bbe:	d10b      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	4b7e      	ldr	r3, [pc, #504]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d05b      	beq.n	8001c84 <HAL_RCC_OscConfig+0x108>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d157      	bne.n	8001c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e242      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be0:	d106      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x74>
 8001be2:	4b76      	ldr	r3, [pc, #472]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a75      	ldr	r2, [pc, #468]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e01d      	b.n	8001c2c <HAL_RCC_OscConfig+0xb0>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x98>
 8001bfa:	4b70      	ldr	r3, [pc, #448]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a6f      	ldr	r2, [pc, #444]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b6d      	ldr	r3, [pc, #436]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a6c      	ldr	r2, [pc, #432]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e00b      	b.n	8001c2c <HAL_RCC_OscConfig+0xb0>
 8001c14:	4b69      	ldr	r3, [pc, #420]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a68      	ldr	r2, [pc, #416]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b66      	ldr	r3, [pc, #408]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a65      	ldr	r2, [pc, #404]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff fc30 	bl	8001498 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff fc2c 	bl	8001498 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	@ 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e207      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	4b5b      	ldr	r3, [pc, #364]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0xc0>
 8001c5a:	e014      	b.n	8001c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fc1c 	bl	8001498 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c64:	f7ff fc18 	bl	8001498 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	@ 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e1f3      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	4b51      	ldr	r3, [pc, #324]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0xe8>
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d063      	beq.n	8001d5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c92:	4b4a      	ldr	r3, [pc, #296]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00b      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9e:	4b47      	ldr	r3, [pc, #284]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d11c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001caa:	4b44      	ldr	r3, [pc, #272]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d116      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	4b41      	ldr	r3, [pc, #260]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_RCC_OscConfig+0x152>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d001      	beq.n	8001cce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e1c7      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cce:	4b3b      	ldr	r3, [pc, #236]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4937      	ldr	r1, [pc, #220]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce2:	e03a      	b.n	8001d5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d020      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cec:	4b34      	ldr	r3, [pc, #208]	@ (8001dc0 <HAL_RCC_OscConfig+0x244>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7ff fbd1 	bl	8001498 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fbcd 	bl	8001498 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e1a8      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d18:	4b28      	ldr	r3, [pc, #160]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4925      	ldr	r1, [pc, #148]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]
 8001d2c:	e015      	b.n	8001d5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2e:	4b24      	ldr	r3, [pc, #144]	@ (8001dc0 <HAL_RCC_OscConfig+0x244>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff fbb0 	bl	8001498 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d3c:	f7ff fbac 	bl	8001498 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e187      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d036      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d016      	beq.n	8001d9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6e:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <HAL_RCC_OscConfig+0x248>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d74:	f7ff fb90 	bl	8001498 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7c:	f7ff fb8c 	bl	8001498 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e167      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x200>
 8001d9a:	e01b      	b.n	8001dd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d9c:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <HAL_RCC_OscConfig+0x248>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da2:	f7ff fb79 	bl	8001498 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da8:	e00e      	b.n	8001dc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001daa:	f7ff fb75 	bl	8001498 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d907      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e150      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	42470000 	.word	0x42470000
 8001dc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc8:	4b88      	ldr	r3, [pc, #544]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001dca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ea      	bne.n	8001daa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 8097 	beq.w	8001f10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de6:	4b81      	ldr	r3, [pc, #516]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10f      	bne.n	8001e12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b7d      	ldr	r3, [pc, #500]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	4a7c      	ldr	r2, [pc, #496]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e02:	4b7a      	ldr	r3, [pc, #488]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e12:	4b77      	ldr	r3, [pc, #476]	@ (8001ff0 <HAL_RCC_OscConfig+0x474>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d118      	bne.n	8001e50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e1e:	4b74      	ldr	r3, [pc, #464]	@ (8001ff0 <HAL_RCC_OscConfig+0x474>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a73      	ldr	r2, [pc, #460]	@ (8001ff0 <HAL_RCC_OscConfig+0x474>)
 8001e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff fb35 	bl	8001498 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e32:	f7ff fb31 	bl	8001498 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e10c      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	4b6a      	ldr	r3, [pc, #424]	@ (8001ff0 <HAL_RCC_OscConfig+0x474>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_OscConfig+0x2ea>
 8001e58:	4b64      	ldr	r3, [pc, #400]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5c:	4a63      	ldr	r2, [pc, #396]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e64:	e01c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x324>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b05      	cmp	r3, #5
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x30c>
 8001e6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e72:	4a5e      	ldr	r2, [pc, #376]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e7a:	4b5c      	ldr	r3, [pc, #368]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7e:	4a5b      	ldr	r2, [pc, #364]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e86:	e00b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x324>
 8001e88:	4b58      	ldr	r3, [pc, #352]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e8c:	4a57      	ldr	r2, [pc, #348]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e94:	4b55      	ldr	r3, [pc, #340]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e98:	4a54      	ldr	r2, [pc, #336]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e9a:	f023 0304 	bic.w	r3, r3, #4
 8001e9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d015      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7ff faf6 	bl	8001498 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb0:	f7ff faf2 	bl	8001498 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e0cb      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec6:	4b49      	ldr	r3, [pc, #292]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0ee      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x334>
 8001ed2:	e014      	b.n	8001efe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed4:	f7ff fae0 	bl	8001498 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001edc:	f7ff fadc 	bl	8001498 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e0b5      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ee      	bne.n	8001edc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001efe:	7dfb      	ldrb	r3, [r7, #23]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d105      	bne.n	8001f10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f04:	4b39      	ldr	r3, [pc, #228]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	4a38      	ldr	r2, [pc, #224]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001f0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80a1 	beq.w	800205c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f1a:	4b34      	ldr	r3, [pc, #208]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d05c      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d141      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2e:	4b31      	ldr	r3, [pc, #196]	@ (8001ff4 <HAL_RCC_OscConfig+0x478>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff fab0 	bl	8001498 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7ff faac 	bl	8001498 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e087      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4e:	4b27      	ldr	r3, [pc, #156]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69da      	ldr	r2, [r3, #28]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f68:	019b      	lsls	r3, r3, #6
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	3b01      	subs	r3, #1
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7c:	061b      	lsls	r3, r3, #24
 8001f7e:	491b      	ldr	r1, [pc, #108]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff4 <HAL_RCC_OscConfig+0x478>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7ff fa85 	bl	8001498 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f92:	f7ff fa81 	bl	8001498 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e05c      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa4:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x416>
 8001fb0:	e054      	b.n	800205c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <HAL_RCC_OscConfig+0x478>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fa6e 	bl	8001498 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7ff fa6a 	bl	8001498 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e045      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd2:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <HAL_RCC_OscConfig+0x470>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x444>
 8001fde:	e03d      	b.n	800205c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d107      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e038      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8002068 <HAL_RCC_OscConfig+0x4ec>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d028      	beq.n	8002058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002010:	429a      	cmp	r2, r3
 8002012:	d121      	bne.n	8002058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201e:	429a      	cmp	r2, r3
 8002020:	d11a      	bne.n	8002058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002028:	4013      	ands	r3, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800202e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002030:	4293      	cmp	r3, r2
 8002032:	d111      	bne.n	8002058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203e:	085b      	lsrs	r3, r3, #1
 8002040:	3b01      	subs	r3, #1
 8002042:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002044:	429a      	cmp	r2, r3
 8002046:	d107      	bne.n	8002058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002052:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800

0800206c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0cc      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002080:	4b68      	ldr	r3, [pc, #416]	@ (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d90c      	bls.n	80020a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4b65      	ldr	r3, [pc, #404]	@ (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	4b63      	ldr	r3, [pc, #396]	@ (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0b8      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d020      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c0:	4b59      	ldr	r3, [pc, #356]	@ (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4a58      	ldr	r2, [pc, #352]	@ (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d8:	4b53      	ldr	r3, [pc, #332]	@ (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	4a52      	ldr	r2, [pc, #328]	@ (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e4:	4b50      	ldr	r3, [pc, #320]	@ (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	494d      	ldr	r1, [pc, #308]	@ (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d044      	beq.n	800218c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	4b47      	ldr	r3, [pc, #284]	@ (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d119      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e07f      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d003      	beq.n	800212a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002126:	2b03      	cmp	r3, #3
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212a:	4b3f      	ldr	r3, [pc, #252]	@ (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e06f      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213a:	4b3b      	ldr	r3, [pc, #236]	@ (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e067      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214a:	4b37      	ldr	r3, [pc, #220]	@ (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f023 0203 	bic.w	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4934      	ldr	r1, [pc, #208]	@ (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 8002158:	4313      	orrs	r3, r2
 800215a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800215c:	f7ff f99c 	bl	8001498 <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	e00a      	b.n	800217a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002164:	f7ff f998 	bl	8001498 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e04f      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	4b2b      	ldr	r3, [pc, #172]	@ (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 020c 	and.w	r2, r3, #12
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	429a      	cmp	r2, r3
 800218a:	d1eb      	bne.n	8002164 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800218c:	4b25      	ldr	r3, [pc, #148]	@ (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d20c      	bcs.n	80021b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b22      	ldr	r3, [pc, #136]	@ (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b20      	ldr	r3, [pc, #128]	@ (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e032      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c0:	4b19      	ldr	r3, [pc, #100]	@ (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4916      	ldr	r1, [pc, #88]	@ (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d009      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021de:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	490e      	ldr	r1, [pc, #56]	@ (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021f2:	f000 f821 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 80021f6:	4602      	mov	r2, r0
 80021f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	490a      	ldr	r1, [pc, #40]	@ (800222c <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	5ccb      	ldrb	r3, [r1, r3]
 8002206:	fa22 f303 	lsr.w	r3, r2, r3
 800220a:	4a09      	ldr	r2, [pc, #36]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800220e:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <HAL_RCC_ClockConfig+0x1c8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff f8fc 	bl	8001410 <HAL_InitTick>

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023c00 	.word	0x40023c00
 8002228:	40023800 	.word	0x40023800
 800222c:	0800376c 	.word	0x0800376c
 8002230:	20000084 	.word	0x20000084
 8002234:	20000088 	.word	0x20000088

08002238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800223c:	b094      	sub	sp, #80	@ 0x50
 800223e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	647b      	str	r3, [r7, #68]	@ 0x44
 8002244:	2300      	movs	r3, #0
 8002246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002248:	2300      	movs	r3, #0
 800224a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002250:	4b79      	ldr	r3, [pc, #484]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	d00d      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x40>
 800225c:	2b08      	cmp	r3, #8
 800225e:	f200 80e1 	bhi.w	8002424 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x34>
 8002266:	2b04      	cmp	r3, #4
 8002268:	d003      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0x3a>
 800226a:	e0db      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800226c:	4b73      	ldr	r3, [pc, #460]	@ (800243c <HAL_RCC_GetSysClockFreq+0x204>)
 800226e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002270:	e0db      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002272:	4b73      	ldr	r3, [pc, #460]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x208>)
 8002274:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002276:	e0d8      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002278:	4b6f      	ldr	r3, [pc, #444]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002280:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002282:	4b6d      	ldr	r3, [pc, #436]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d063      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800228e:	4b6a      	ldr	r3, [pc, #424]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	099b      	lsrs	r3, r3, #6
 8002294:	2200      	movs	r2, #0
 8002296:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002298:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800229a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800229c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80022a2:	2300      	movs	r3, #0
 80022a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80022a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80022aa:	4622      	mov	r2, r4
 80022ac:	462b      	mov	r3, r5
 80022ae:	f04f 0000 	mov.w	r0, #0
 80022b2:	f04f 0100 	mov.w	r1, #0
 80022b6:	0159      	lsls	r1, r3, #5
 80022b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022bc:	0150      	lsls	r0, r2, #5
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4621      	mov	r1, r4
 80022c4:	1a51      	subs	r1, r2, r1
 80022c6:	6139      	str	r1, [r7, #16]
 80022c8:	4629      	mov	r1, r5
 80022ca:	eb63 0301 	sbc.w	r3, r3, r1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022dc:	4659      	mov	r1, fp
 80022de:	018b      	lsls	r3, r1, #6
 80022e0:	4651      	mov	r1, sl
 80022e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022e6:	4651      	mov	r1, sl
 80022e8:	018a      	lsls	r2, r1, #6
 80022ea:	4651      	mov	r1, sl
 80022ec:	ebb2 0801 	subs.w	r8, r2, r1
 80022f0:	4659      	mov	r1, fp
 80022f2:	eb63 0901 	sbc.w	r9, r3, r1
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002302:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002306:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800230a:	4690      	mov	r8, r2
 800230c:	4699      	mov	r9, r3
 800230e:	4623      	mov	r3, r4
 8002310:	eb18 0303 	adds.w	r3, r8, r3
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	462b      	mov	r3, r5
 8002318:	eb49 0303 	adc.w	r3, r9, r3
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800232a:	4629      	mov	r1, r5
 800232c:	024b      	lsls	r3, r1, #9
 800232e:	4621      	mov	r1, r4
 8002330:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002334:	4621      	mov	r1, r4
 8002336:	024a      	lsls	r2, r1, #9
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
 800233c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800233e:	2200      	movs	r2, #0
 8002340:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002342:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002344:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002348:	f7fe f90a 	bl	8000560 <__aeabi_uldivmod>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4613      	mov	r3, r2
 8002352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002354:	e058      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002356:	4b38      	ldr	r3, [pc, #224]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	099b      	lsrs	r3, r3, #6
 800235c:	2200      	movs	r2, #0
 800235e:	4618      	mov	r0, r3
 8002360:	4611      	mov	r1, r2
 8002362:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002366:	623b      	str	r3, [r7, #32]
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24
 800236c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002370:	4642      	mov	r2, r8
 8002372:	464b      	mov	r3, r9
 8002374:	f04f 0000 	mov.w	r0, #0
 8002378:	f04f 0100 	mov.w	r1, #0
 800237c:	0159      	lsls	r1, r3, #5
 800237e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002382:	0150      	lsls	r0, r2, #5
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4641      	mov	r1, r8
 800238a:	ebb2 0a01 	subs.w	sl, r2, r1
 800238e:	4649      	mov	r1, r9
 8002390:	eb63 0b01 	sbc.w	fp, r3, r1
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023a8:	ebb2 040a 	subs.w	r4, r2, sl
 80023ac:	eb63 050b 	sbc.w	r5, r3, fp
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	00eb      	lsls	r3, r5, #3
 80023ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023be:	00e2      	lsls	r2, r4, #3
 80023c0:	4614      	mov	r4, r2
 80023c2:	461d      	mov	r5, r3
 80023c4:	4643      	mov	r3, r8
 80023c6:	18e3      	adds	r3, r4, r3
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	464b      	mov	r3, r9
 80023cc:	eb45 0303 	adc.w	r3, r5, r3
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023de:	4629      	mov	r1, r5
 80023e0:	028b      	lsls	r3, r1, #10
 80023e2:	4621      	mov	r1, r4
 80023e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023e8:	4621      	mov	r1, r4
 80023ea:	028a      	lsls	r2, r1, #10
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023f2:	2200      	movs	r2, #0
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	61fa      	str	r2, [r7, #28]
 80023f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023fc:	f7fe f8b0 	bl	8000560 <__aeabi_uldivmod>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4613      	mov	r3, r2
 8002406:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002408:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	3301      	adds	r3, #1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002418:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800241a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002422:	e002      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002424:	4b05      	ldr	r3, [pc, #20]	@ (800243c <HAL_RCC_GetSysClockFreq+0x204>)
 8002426:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800242a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800242c:	4618      	mov	r0, r3
 800242e:	3750      	adds	r7, #80	@ 0x50
 8002430:	46bd      	mov	sp, r7
 8002432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800
 800243c:	00f42400 	.word	0x00f42400
 8002440:	007a1200 	.word	0x007a1200

08002444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002448:	4b03      	ldr	r3, [pc, #12]	@ (8002458 <HAL_RCC_GetHCLKFreq+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000084 	.word	0x20000084

0800245c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002460:	f7ff fff0 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	@ (800247c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0a9b      	lsrs	r3, r3, #10
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4903      	ldr	r1, [pc, #12]	@ (8002480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	0800377c 	.word	0x0800377c

08002484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002488:	f7ff ffdc 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 800248c:	4602      	mov	r2, r0
 800248e:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	0b5b      	lsrs	r3, r3, #13
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	4903      	ldr	r1, [pc, #12]	@ (80024a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800249a:	5ccb      	ldrb	r3, [r1, r3]
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	0800377c 	.word	0x0800377c

080024ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e03f      	b.n	800253e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe feb4 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2224      	movs	r2, #36	@ 0x24
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fddf 	bl	80030b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002504:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002514:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002524:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b08a      	sub	sp, #40	@ 0x28
 800254a:	af02      	add	r7, sp, #8
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	4613      	mov	r3, r2
 8002554:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b20      	cmp	r3, #32
 8002564:	d17c      	bne.n	8002660 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_UART_Transmit+0x2c>
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e075      	b.n	8002662 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_UART_Transmit+0x3e>
 8002580:	2302      	movs	r3, #2
 8002582:	e06e      	b.n	8002662 <HAL_UART_Transmit+0x11c>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2221      	movs	r2, #33	@ 0x21
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800259a:	f7fe ff7d 	bl	8001498 <HAL_GetTick>
 800259e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	88fa      	ldrh	r2, [r7, #6]
 80025a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	88fa      	ldrh	r2, [r7, #6]
 80025aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025b4:	d108      	bne.n	80025c8 <HAL_UART_Transmit+0x82>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d104      	bne.n	80025c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	e003      	b.n	80025d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80025d8:	e02a      	b.n	8002630 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2200      	movs	r2, #0
 80025e2:	2180      	movs	r1, #128	@ 0x80
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fb1f 	bl	8002c28 <UART_WaitOnFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e036      	b.n	8002662 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10b      	bne.n	8002612 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002608:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	3302      	adds	r3, #2
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	e007      	b.n	8002622 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3301      	adds	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1cf      	bne.n	80025da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2200      	movs	r2, #0
 8002642:	2140      	movs	r1, #64	@ 0x40
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 faef 	bl	8002c28 <UART_WaitOnFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e006      	b.n	8002662 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	e000      	b.n	8002662 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002660:	2302      	movs	r3, #2
  }
}
 8002662:	4618      	mov	r0, r3
 8002664:	3720      	adds	r7, #32
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	4613      	mov	r3, r2
 8002676:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b20      	cmp	r3, #32
 8002682:	d11d      	bne.n	80026c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_UART_Receive_IT+0x26>
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e016      	b.n	80026c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Receive_IT+0x38>
 800269e:	2302      	movs	r3, #2
 80026a0:	e00f      	b.n	80026c2 <HAL_UART_Receive_IT+0x58>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	461a      	mov	r2, r3
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 fb24 	bl	8002d04 <UART_Start_Receive_IT>
 80026bc:	4603      	mov	r3, r0
 80026be:	e000      	b.n	80026c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80026c0:	2302      	movs	r3, #2
  }
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b0ba      	sub	sp, #232	@ 0xe8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800270a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10f      	bne.n	8002732 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <HAL_UART_IRQHandler+0x66>
 800271e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002722:	f003 0320 	and.w	r3, r3, #32
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fc07 	bl	8002f3e <UART_Receive_IT>
      return;
 8002730:	e256      	b.n	8002be0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 80de 	beq.w	80028f8 <HAL_UART_IRQHandler+0x22c>
 800273c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d106      	bne.n	8002756 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800274c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80d1 	beq.w	80028f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00b      	beq.n	800277a <HAL_UART_IRQHandler+0xae>
 8002762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	f043 0201 	orr.w	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800277a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00b      	beq.n	800279e <HAL_UART_IRQHandler+0xd2>
 8002786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	f043 0202 	orr.w	r2, r3, #2
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800279e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <HAL_UART_IRQHandler+0xf6>
 80027aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f043 0204 	orr.w	r2, r3, #4
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d011      	beq.n	80027f2 <HAL_UART_IRQHandler+0x126>
 80027ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d105      	bne.n	80027e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	f043 0208 	orr.w	r2, r3, #8
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 81ed 	beq.w	8002bd6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_UART_IRQHandler+0x14e>
 8002808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fb92 	bl	8002f3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002824:	2b40      	cmp	r3, #64	@ 0x40
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d103      	bne.n	8002846 <HAL_UART_IRQHandler+0x17a>
 800283e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002842:	2b00      	cmp	r3, #0
 8002844:	d04f      	beq.n	80028e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fa9a 	bl	8002d80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002856:	2b40      	cmp	r3, #64	@ 0x40
 8002858:	d141      	bne.n	80028de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	3314      	adds	r3, #20
 8002860:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002864:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002868:	e853 3f00 	ldrex	r3, [r3]
 800286c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002870:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002874:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002878:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	3314      	adds	r3, #20
 8002882:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002886:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800288a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002892:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002896:	e841 2300 	strex	r3, r2, [r1]
 800289a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800289e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1d9      	bne.n	800285a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d013      	beq.n	80028d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b2:	4a7d      	ldr	r2, [pc, #500]	@ (8002aa8 <HAL_UART_IRQHandler+0x3dc>)
 80028b4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe ff9d 	bl	80017fa <HAL_DMA_Abort_IT>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d016      	beq.n	80028f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028d0:	4610      	mov	r0, r2
 80028d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d4:	e00e      	b.n	80028f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f990 	bl	8002bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028dc:	e00a      	b.n	80028f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f98c 	bl	8002bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e4:	e006      	b.n	80028f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f988 	bl	8002bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80028f2:	e170      	b.n	8002bd6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f4:	bf00      	nop
    return;
 80028f6:	e16e      	b.n	8002bd6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	f040 814a 	bne.w	8002b96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8143 	beq.w	8002b96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 813c 	beq.w	8002b96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293e:	2b40      	cmp	r3, #64	@ 0x40
 8002940:	f040 80b4 	bne.w	8002aac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002950:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8140 	beq.w	8002bda <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800295e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002962:	429a      	cmp	r2, r3
 8002964:	f080 8139 	bcs.w	8002bda <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800296e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800297a:	f000 8088 	beq.w	8002a8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	330c      	adds	r3, #12
 8002984:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002988:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800298c:	e853 3f00 	ldrex	r3, [r3]
 8002990:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002994:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002998:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800299c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	330c      	adds	r3, #12
 80029a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80029aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80029b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80029ba:	e841 2300 	strex	r3, r2, [r1]
 80029be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80029c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1d9      	bne.n	800297e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3314      	adds	r3, #20
 80029d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029d4:	e853 3f00 	ldrex	r3, [r3]
 80029d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80029da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3314      	adds	r3, #20
 80029ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80029f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80029f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80029fa:	e841 2300 	strex	r3, r2, [r1]
 80029fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1e1      	bne.n	80029ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3314      	adds	r3, #20
 8002a0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a10:	e853 3f00 	ldrex	r3, [r3]
 8002a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002a16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	3314      	adds	r3, #20
 8002a26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002a2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a32:	e841 2300 	strex	r3, r2, [r1]
 8002a36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002a38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1e3      	bne.n	8002a06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	330c      	adds	r3, #12
 8002a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a56:	e853 3f00 	ldrex	r3, [r3]
 8002a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a5e:	f023 0310 	bic.w	r3, r3, #16
 8002a62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	330c      	adds	r3, #12
 8002a6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002a70:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a72:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a78:	e841 2300 	strex	r3, r2, [r1]
 8002a7c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e3      	bne.n	8002a4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe fe46 	bl	800171a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f8b6 	bl	8002c10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002aa4:	e099      	b.n	8002bda <HAL_UART_IRQHandler+0x50e>
 8002aa6:	bf00      	nop
 8002aa8:	08002e47 	.word	0x08002e47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 808b 	beq.w	8002bde <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002ac8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8086 	beq.w	8002bde <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002adc:	e853 3f00 	ldrex	r3, [r3]
 8002ae0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	330c      	adds	r3, #12
 8002af2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002af6:	647a      	str	r2, [r7, #68]	@ 0x44
 8002af8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002afc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002afe:	e841 2300 	strex	r3, r2, [r1]
 8002b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1e3      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3314      	adds	r3, #20
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	e853 3f00 	ldrex	r3, [r3]
 8002b18:	623b      	str	r3, [r7, #32]
   return(result);
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3314      	adds	r3, #20
 8002b2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b36:	e841 2300 	strex	r3, r2, [r1]
 8002b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1e3      	bne.n	8002b0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	330c      	adds	r3, #12
 8002b56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	e853 3f00 	ldrex	r3, [r3]
 8002b5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0310 	bic.w	r3, r3, #16
 8002b66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	330c      	adds	r3, #12
 8002b70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002b74:	61fa      	str	r2, [r7, #28]
 8002b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b78:	69b9      	ldr	r1, [r7, #24]
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	e841 2300 	strex	r3, r2, [r1]
 8002b80:	617b      	str	r3, [r7, #20]
   return(result);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1e3      	bne.n	8002b50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f83e 	bl	8002c10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b94:	e023      	b.n	8002bde <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d009      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x4ea>
 8002ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f95d 	bl	8002e6e <UART_Transmit_IT>
    return;
 8002bb4:	e014      	b.n	8002be0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00e      	beq.n	8002be0 <HAL_UART_IRQHandler+0x514>
 8002bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d008      	beq.n	8002be0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f99d 	bl	8002f0e <UART_EndTransmit_IT>
    return;
 8002bd4:	e004      	b.n	8002be0 <HAL_UART_IRQHandler+0x514>
    return;
 8002bd6:	bf00      	nop
 8002bd8:	e002      	b.n	8002be0 <HAL_UART_IRQHandler+0x514>
      return;
 8002bda:	bf00      	nop
 8002bdc:	e000      	b.n	8002be0 <HAL_UART_IRQHandler+0x514>
      return;
 8002bde:	bf00      	nop
  }
}
 8002be0:	37e8      	adds	r7, #232	@ 0xe8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop

08002be8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b090      	sub	sp, #64	@ 0x40
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	4613      	mov	r3, r2
 8002c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c38:	e050      	b.n	8002cdc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d04c      	beq.n	8002cdc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d007      	beq.n	8002c58 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c48:	f7fe fc26 	bl	8001498 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d241      	bcs.n	8002cdc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	330c      	adds	r3, #12
 8002c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c62:	e853 3f00 	ldrex	r3, [r3]
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	330c      	adds	r3, #12
 8002c76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c78:	637a      	str	r2, [r7, #52]	@ 0x34
 8002c7a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c80:	e841 2300 	strex	r3, r2, [r1]
 8002c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e5      	bne.n	8002c58 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3314      	adds	r3, #20
 8002c92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	e853 3f00 	ldrex	r3, [r3]
 8002c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3314      	adds	r3, #20
 8002caa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cac:	623a      	str	r2, [r7, #32]
 8002cae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb0:	69f9      	ldr	r1, [r7, #28]
 8002cb2:	6a3a      	ldr	r2, [r7, #32]
 8002cb4:	e841 2300 	strex	r3, r2, [r1]
 8002cb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1e5      	bne.n	8002c8c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e00f      	b.n	8002cfc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d09f      	beq.n	8002c3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3740      	adds	r7, #64	@ 0x40
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	88fa      	ldrh	r2, [r7, #6]
 8002d1c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	88fa      	ldrh	r2, [r7, #6]
 8002d22:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2222      	movs	r2, #34	@ 0x22
 8002d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d007      	beq.n	8002d52 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d50:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0220 	orr.w	r2, r2, #32
 8002d70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b095      	sub	sp, #84	@ 0x54
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	330c      	adds	r3, #12
 8002da6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002da8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002dae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e5      	bne.n	8002d88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3314      	adds	r3, #20
 8002dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	e853 3f00 	ldrex	r3, [r3]
 8002dca:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3314      	adds	r3, #20
 8002dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ddc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002de2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002de4:	e841 2300 	strex	r3, r2, [r1]
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e5      	bne.n	8002dbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d119      	bne.n	8002e2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	e853 3f00 	ldrex	r3, [r3]
 8002e06:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f023 0310 	bic.w	r3, r3, #16
 8002e0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	330c      	adds	r3, #12
 8002e16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e18:	61ba      	str	r2, [r7, #24]
 8002e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	6979      	ldr	r1, [r7, #20]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	613b      	str	r3, [r7, #16]
   return(result);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e5      	bne.n	8002df8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e3a:	bf00      	nop
 8002e3c:	3754      	adds	r7, #84	@ 0x54
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f7ff fecb 	bl	8002bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b21      	cmp	r3, #33	@ 0x21
 8002e80:	d13e      	bne.n	8002f00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e8a:	d114      	bne.n	8002eb6 <UART_Transmit_IT+0x48>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d110      	bne.n	8002eb6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ea8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	1c9a      	adds	r2, r3, #2
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	621a      	str	r2, [r3, #32]
 8002eb4:	e008      	b.n	8002ec8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	1c59      	adds	r1, r3, #1
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6211      	str	r1, [r2, #32]
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10f      	bne.n	8002efc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002eea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002efa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e000      	b.n	8002f02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f00:	2302      	movs	r3, #2
  }
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff fe5a 	bl	8002be8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b08c      	sub	sp, #48	@ 0x30
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b22      	cmp	r3, #34	@ 0x22
 8002f50:	f040 80ab 	bne.w	80030aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f5c:	d117      	bne.n	8002f8e <UART_Receive_IT+0x50>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d113      	bne.n	8002f8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f86:	1c9a      	adds	r2, r3, #2
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f8c:	e026      	b.n	8002fdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa0:	d007      	beq.n	8002fb2 <UART_Receive_IT+0x74>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10a      	bne.n	8002fc0 <UART_Receive_IT+0x82>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	e008      	b.n	8002fd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d15a      	bne.n	80030a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0220 	bic.w	r2, r2, #32
 8002ffe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800300e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302c:	2b01      	cmp	r3, #1
 800302e:	d135      	bne.n	800309c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	330c      	adds	r3, #12
 800303c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	e853 3f00 	ldrex	r3, [r3]
 8003044:	613b      	str	r3, [r7, #16]
   return(result);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f023 0310 	bic.w	r3, r3, #16
 800304c:	627b      	str	r3, [r7, #36]	@ 0x24
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	330c      	adds	r3, #12
 8003054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003056:	623a      	str	r2, [r7, #32]
 8003058:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305a:	69f9      	ldr	r1, [r7, #28]
 800305c:	6a3a      	ldr	r2, [r7, #32]
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	61bb      	str	r3, [r7, #24]
   return(result);
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e5      	bne.n	8003036 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b10      	cmp	r3, #16
 8003076:	d10a      	bne.n	800308e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003092:	4619      	mov	r1, r3
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff fdbb 	bl	8002c10 <HAL_UARTEx_RxEventCallback>
 800309a:	e002      	b.n	80030a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7fd feb3 	bl	8000e08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e002      	b.n	80030ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	e000      	b.n	80030ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80030aa:	2302      	movs	r3, #2
  }
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3730      	adds	r7, #48	@ 0x30
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b8:	b0c0      	sub	sp, #256	@ 0x100
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d0:	68d9      	ldr	r1, [r3, #12]
 80030d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	ea40 0301 	orr.w	r3, r0, r1
 80030dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800310c:	f021 010c 	bic.w	r1, r1, #12
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800311a:	430b      	orrs	r3, r1
 800311c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800312a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312e:	6999      	ldr	r1, [r3, #24]
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	ea40 0301 	orr.w	r3, r0, r1
 800313a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4b8f      	ldr	r3, [pc, #572]	@ (8003380 <UART_SetConfig+0x2cc>)
 8003144:	429a      	cmp	r2, r3
 8003146:	d005      	beq.n	8003154 <UART_SetConfig+0xa0>
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b8d      	ldr	r3, [pc, #564]	@ (8003384 <UART_SetConfig+0x2d0>)
 8003150:	429a      	cmp	r2, r3
 8003152:	d104      	bne.n	800315e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003154:	f7ff f996 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 8003158:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800315c:	e003      	b.n	8003166 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800315e:	f7ff f97d 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8003162:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003170:	f040 810c 	bne.w	800338c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003178:	2200      	movs	r2, #0
 800317a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800317e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003182:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003186:	4622      	mov	r2, r4
 8003188:	462b      	mov	r3, r5
 800318a:	1891      	adds	r1, r2, r2
 800318c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800318e:	415b      	adcs	r3, r3
 8003190:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003192:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003196:	4621      	mov	r1, r4
 8003198:	eb12 0801 	adds.w	r8, r2, r1
 800319c:	4629      	mov	r1, r5
 800319e:	eb43 0901 	adc.w	r9, r3, r1
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031b6:	4690      	mov	r8, r2
 80031b8:	4699      	mov	r9, r3
 80031ba:	4623      	mov	r3, r4
 80031bc:	eb18 0303 	adds.w	r3, r8, r3
 80031c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031c4:	462b      	mov	r3, r5
 80031c6:	eb49 0303 	adc.w	r3, r9, r3
 80031ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80031da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80031de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80031e2:	460b      	mov	r3, r1
 80031e4:	18db      	adds	r3, r3, r3
 80031e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80031e8:	4613      	mov	r3, r2
 80031ea:	eb42 0303 	adc.w	r3, r2, r3
 80031ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80031f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80031f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80031f8:	f7fd f9b2 	bl	8000560 <__aeabi_uldivmod>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4b61      	ldr	r3, [pc, #388]	@ (8003388 <UART_SetConfig+0x2d4>)
 8003202:	fba3 2302 	umull	r2, r3, r3, r2
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	011c      	lsls	r4, r3, #4
 800320a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800320e:	2200      	movs	r2, #0
 8003210:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003214:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003218:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800321c:	4642      	mov	r2, r8
 800321e:	464b      	mov	r3, r9
 8003220:	1891      	adds	r1, r2, r2
 8003222:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003224:	415b      	adcs	r3, r3
 8003226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003228:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800322c:	4641      	mov	r1, r8
 800322e:	eb12 0a01 	adds.w	sl, r2, r1
 8003232:	4649      	mov	r1, r9
 8003234:	eb43 0b01 	adc.w	fp, r3, r1
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003244:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003248:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800324c:	4692      	mov	sl, r2
 800324e:	469b      	mov	fp, r3
 8003250:	4643      	mov	r3, r8
 8003252:	eb1a 0303 	adds.w	r3, sl, r3
 8003256:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800325a:	464b      	mov	r3, r9
 800325c:	eb4b 0303 	adc.w	r3, fp, r3
 8003260:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003270:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003274:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003278:	460b      	mov	r3, r1
 800327a:	18db      	adds	r3, r3, r3
 800327c:	643b      	str	r3, [r7, #64]	@ 0x40
 800327e:	4613      	mov	r3, r2
 8003280:	eb42 0303 	adc.w	r3, r2, r3
 8003284:	647b      	str	r3, [r7, #68]	@ 0x44
 8003286:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800328a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800328e:	f7fd f967 	bl	8000560 <__aeabi_uldivmod>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4611      	mov	r1, r2
 8003298:	4b3b      	ldr	r3, [pc, #236]	@ (8003388 <UART_SetConfig+0x2d4>)
 800329a:	fba3 2301 	umull	r2, r3, r3, r1
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2264      	movs	r2, #100	@ 0x64
 80032a2:	fb02 f303 	mul.w	r3, r2, r3
 80032a6:	1acb      	subs	r3, r1, r3
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80032ae:	4b36      	ldr	r3, [pc, #216]	@ (8003388 <UART_SetConfig+0x2d4>)
 80032b0:	fba3 2302 	umull	r2, r3, r3, r2
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80032bc:	441c      	add	r4, r3
 80032be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80032cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80032d0:	4642      	mov	r2, r8
 80032d2:	464b      	mov	r3, r9
 80032d4:	1891      	adds	r1, r2, r2
 80032d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80032d8:	415b      	adcs	r3, r3
 80032da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80032e0:	4641      	mov	r1, r8
 80032e2:	1851      	adds	r1, r2, r1
 80032e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80032e6:	4649      	mov	r1, r9
 80032e8:	414b      	adcs	r3, r1
 80032ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80032f8:	4659      	mov	r1, fp
 80032fa:	00cb      	lsls	r3, r1, #3
 80032fc:	4651      	mov	r1, sl
 80032fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003302:	4651      	mov	r1, sl
 8003304:	00ca      	lsls	r2, r1, #3
 8003306:	4610      	mov	r0, r2
 8003308:	4619      	mov	r1, r3
 800330a:	4603      	mov	r3, r0
 800330c:	4642      	mov	r2, r8
 800330e:	189b      	adds	r3, r3, r2
 8003310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003314:	464b      	mov	r3, r9
 8003316:	460a      	mov	r2, r1
 8003318:	eb42 0303 	adc.w	r3, r2, r3
 800331c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800332c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003330:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003334:	460b      	mov	r3, r1
 8003336:	18db      	adds	r3, r3, r3
 8003338:	62bb      	str	r3, [r7, #40]	@ 0x28
 800333a:	4613      	mov	r3, r2
 800333c:	eb42 0303 	adc.w	r3, r2, r3
 8003340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003342:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003346:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800334a:	f7fd f909 	bl	8000560 <__aeabi_uldivmod>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4b0d      	ldr	r3, [pc, #52]	@ (8003388 <UART_SetConfig+0x2d4>)
 8003354:	fba3 1302 	umull	r1, r3, r3, r2
 8003358:	095b      	lsrs	r3, r3, #5
 800335a:	2164      	movs	r1, #100	@ 0x64
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	3332      	adds	r3, #50	@ 0x32
 8003366:	4a08      	ldr	r2, [pc, #32]	@ (8003388 <UART_SetConfig+0x2d4>)
 8003368:	fba2 2303 	umull	r2, r3, r2, r3
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	f003 0207 	and.w	r2, r3, #7
 8003372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4422      	add	r2, r4
 800337a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800337c:	e106      	b.n	800358c <UART_SetConfig+0x4d8>
 800337e:	bf00      	nop
 8003380:	40011000 	.word	0x40011000
 8003384:	40011400 	.word	0x40011400
 8003388:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800338c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003390:	2200      	movs	r2, #0
 8003392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003396:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800339a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800339e:	4642      	mov	r2, r8
 80033a0:	464b      	mov	r3, r9
 80033a2:	1891      	adds	r1, r2, r2
 80033a4:	6239      	str	r1, [r7, #32]
 80033a6:	415b      	adcs	r3, r3
 80033a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033ae:	4641      	mov	r1, r8
 80033b0:	1854      	adds	r4, r2, r1
 80033b2:	4649      	mov	r1, r9
 80033b4:	eb43 0501 	adc.w	r5, r3, r1
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	00eb      	lsls	r3, r5, #3
 80033c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033c6:	00e2      	lsls	r2, r4, #3
 80033c8:	4614      	mov	r4, r2
 80033ca:	461d      	mov	r5, r3
 80033cc:	4643      	mov	r3, r8
 80033ce:	18e3      	adds	r3, r4, r3
 80033d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033d4:	464b      	mov	r3, r9
 80033d6:	eb45 0303 	adc.w	r3, r5, r3
 80033da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80033de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80033fa:	4629      	mov	r1, r5
 80033fc:	008b      	lsls	r3, r1, #2
 80033fe:	4621      	mov	r1, r4
 8003400:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003404:	4621      	mov	r1, r4
 8003406:	008a      	lsls	r2, r1, #2
 8003408:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800340c:	f7fd f8a8 	bl	8000560 <__aeabi_uldivmod>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4b60      	ldr	r3, [pc, #384]	@ (8003598 <UART_SetConfig+0x4e4>)
 8003416:	fba3 2302 	umull	r2, r3, r3, r2
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	011c      	lsls	r4, r3, #4
 800341e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003422:	2200      	movs	r2, #0
 8003424:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003428:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800342c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003430:	4642      	mov	r2, r8
 8003432:	464b      	mov	r3, r9
 8003434:	1891      	adds	r1, r2, r2
 8003436:	61b9      	str	r1, [r7, #24]
 8003438:	415b      	adcs	r3, r3
 800343a:	61fb      	str	r3, [r7, #28]
 800343c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003440:	4641      	mov	r1, r8
 8003442:	1851      	adds	r1, r2, r1
 8003444:	6139      	str	r1, [r7, #16]
 8003446:	4649      	mov	r1, r9
 8003448:	414b      	adcs	r3, r1
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003458:	4659      	mov	r1, fp
 800345a:	00cb      	lsls	r3, r1, #3
 800345c:	4651      	mov	r1, sl
 800345e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003462:	4651      	mov	r1, sl
 8003464:	00ca      	lsls	r2, r1, #3
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	4603      	mov	r3, r0
 800346c:	4642      	mov	r2, r8
 800346e:	189b      	adds	r3, r3, r2
 8003470:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003474:	464b      	mov	r3, r9
 8003476:	460a      	mov	r2, r1
 8003478:	eb42 0303 	adc.w	r3, r2, r3
 800347c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	67bb      	str	r3, [r7, #120]	@ 0x78
 800348a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003498:	4649      	mov	r1, r9
 800349a:	008b      	lsls	r3, r1, #2
 800349c:	4641      	mov	r1, r8
 800349e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034a2:	4641      	mov	r1, r8
 80034a4:	008a      	lsls	r2, r1, #2
 80034a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80034aa:	f7fd f859 	bl	8000560 <__aeabi_uldivmod>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4611      	mov	r1, r2
 80034b4:	4b38      	ldr	r3, [pc, #224]	@ (8003598 <UART_SetConfig+0x4e4>)
 80034b6:	fba3 2301 	umull	r2, r3, r3, r1
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	2264      	movs	r2, #100	@ 0x64
 80034be:	fb02 f303 	mul.w	r3, r2, r3
 80034c2:	1acb      	subs	r3, r1, r3
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	3332      	adds	r3, #50	@ 0x32
 80034c8:	4a33      	ldr	r2, [pc, #204]	@ (8003598 <UART_SetConfig+0x4e4>)
 80034ca:	fba2 2303 	umull	r2, r3, r2, r3
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034d4:	441c      	add	r4, r3
 80034d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034da:	2200      	movs	r2, #0
 80034dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80034de:	677a      	str	r2, [r7, #116]	@ 0x74
 80034e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80034e4:	4642      	mov	r2, r8
 80034e6:	464b      	mov	r3, r9
 80034e8:	1891      	adds	r1, r2, r2
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	415b      	adcs	r3, r3
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034f4:	4641      	mov	r1, r8
 80034f6:	1851      	adds	r1, r2, r1
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	4649      	mov	r1, r9
 80034fc:	414b      	adcs	r3, r1
 80034fe:	607b      	str	r3, [r7, #4]
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800350c:	4659      	mov	r1, fp
 800350e:	00cb      	lsls	r3, r1, #3
 8003510:	4651      	mov	r1, sl
 8003512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003516:	4651      	mov	r1, sl
 8003518:	00ca      	lsls	r2, r1, #3
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	4603      	mov	r3, r0
 8003520:	4642      	mov	r2, r8
 8003522:	189b      	adds	r3, r3, r2
 8003524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003526:	464b      	mov	r3, r9
 8003528:	460a      	mov	r2, r1
 800352a:	eb42 0303 	adc.w	r3, r2, r3
 800352e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	663b      	str	r3, [r7, #96]	@ 0x60
 800353a:	667a      	str	r2, [r7, #100]	@ 0x64
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003548:	4649      	mov	r1, r9
 800354a:	008b      	lsls	r3, r1, #2
 800354c:	4641      	mov	r1, r8
 800354e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003552:	4641      	mov	r1, r8
 8003554:	008a      	lsls	r2, r1, #2
 8003556:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800355a:	f7fd f801 	bl	8000560 <__aeabi_uldivmod>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <UART_SetConfig+0x4e4>)
 8003564:	fba3 1302 	umull	r1, r3, r3, r2
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	2164      	movs	r1, #100	@ 0x64
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	3332      	adds	r3, #50	@ 0x32
 8003576:	4a08      	ldr	r2, [pc, #32]	@ (8003598 <UART_SetConfig+0x4e4>)
 8003578:	fba2 2303 	umull	r2, r3, r2, r3
 800357c:	095b      	lsrs	r3, r3, #5
 800357e:	f003 020f 	and.w	r2, r3, #15
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4422      	add	r2, r4
 800358a:	609a      	str	r2, [r3, #8]
}
 800358c:	bf00      	nop
 800358e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003592:	46bd      	mov	sp, r7
 8003594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003598:	51eb851f 	.word	0x51eb851f

0800359c <memset>:
 800359c:	4402      	add	r2, r0
 800359e:	4603      	mov	r3, r0
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d100      	bne.n	80035a6 <memset+0xa>
 80035a4:	4770      	bx	lr
 80035a6:	f803 1b01 	strb.w	r1, [r3], #1
 80035aa:	e7f9      	b.n	80035a0 <memset+0x4>

080035ac <strcat>:
 80035ac:	b510      	push	{r4, lr}
 80035ae:	4602      	mov	r2, r0
 80035b0:	7814      	ldrb	r4, [r2, #0]
 80035b2:	4613      	mov	r3, r2
 80035b4:	3201      	adds	r2, #1
 80035b6:	2c00      	cmp	r4, #0
 80035b8:	d1fa      	bne.n	80035b0 <strcat+0x4>
 80035ba:	3b01      	subs	r3, #1
 80035bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035c4:	2a00      	cmp	r2, #0
 80035c6:	d1f9      	bne.n	80035bc <strcat+0x10>
 80035c8:	bd10      	pop	{r4, pc}
	...

080035cc <__libc_init_array>:
 80035cc:	b570      	push	{r4, r5, r6, lr}
 80035ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003604 <__libc_init_array+0x38>)
 80035d0:	4c0d      	ldr	r4, [pc, #52]	@ (8003608 <__libc_init_array+0x3c>)
 80035d2:	1b64      	subs	r4, r4, r5
 80035d4:	10a4      	asrs	r4, r4, #2
 80035d6:	2600      	movs	r6, #0
 80035d8:	42a6      	cmp	r6, r4
 80035da:	d109      	bne.n	80035f0 <__libc_init_array+0x24>
 80035dc:	4d0b      	ldr	r5, [pc, #44]	@ (800360c <__libc_init_array+0x40>)
 80035de:	4c0c      	ldr	r4, [pc, #48]	@ (8003610 <__libc_init_array+0x44>)
 80035e0:	f000 f818 	bl	8003614 <_init>
 80035e4:	1b64      	subs	r4, r4, r5
 80035e6:	10a4      	asrs	r4, r4, #2
 80035e8:	2600      	movs	r6, #0
 80035ea:	42a6      	cmp	r6, r4
 80035ec:	d105      	bne.n	80035fa <__libc_init_array+0x2e>
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
 80035f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035f4:	4798      	blx	r3
 80035f6:	3601      	adds	r6, #1
 80035f8:	e7ee      	b.n	80035d8 <__libc_init_array+0xc>
 80035fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80035fe:	4798      	blx	r3
 8003600:	3601      	adds	r6, #1
 8003602:	e7f2      	b.n	80035ea <__libc_init_array+0x1e>
 8003604:	0800378c 	.word	0x0800378c
 8003608:	0800378c 	.word	0x0800378c
 800360c:	0800378c 	.word	0x0800378c
 8003610:	08003790 	.word	0x08003790

08003614 <_init>:
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	bf00      	nop
 8003618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361a:	bc08      	pop	{r3}
 800361c:	469e      	mov	lr, r3
 800361e:	4770      	bx	lr

08003620 <_fini>:
 8003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003622:	bf00      	nop
 8003624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003626:	bc08      	pop	{r3}
 8003628:	469e      	mov	lr, r3
 800362a:	4770      	bx	lr
